{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "collectionName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "collectionSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURISuffix",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxMintableSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "globalWalletLimit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "cosigner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotIncreaseMaxMintableSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotUpdatePermanentBaseURI",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CosignerNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CrossmintAddressNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CrossmintOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GlobalWalletLimitOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientStageTimeGap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCosignSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidQueryRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStageArgsLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStartAndEndTimestamp",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Mintable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSupplyLeft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMintable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StageSupplyExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimestampExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WalletGlobalLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WalletStageLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "PermanentBaseURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activeStage",
          "type": "uint256"
        }
      ],
      "name": "SetActiveStage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "SetBaseURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "cosigner",
          "type": "address"
        }
      ],
      "name": "SetCosigner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "crossmintAddress",
          "type": "address"
        }
      ],
      "name": "SetCrossmintAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "globalWalletLimit",
          "type": "uint256"
        }
      ],
      "name": "SetGlobalWalletLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxMintableSupply",
          "type": "uint256"
        }
      ],
      "name": "SetMaxMintableSupply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "mintable",
          "type": "bool"
        }
      ],
      "name": "SetMintable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint80",
          "name": "price",
          "type": "uint80"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "walletLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "maxStageSupply",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "startTimeUnixSeconds",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "endTimeUnixSeconds",
          "type": "uint64"
        }
      ],
      "name": "UpdateStage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CROSSMINT_TIMESTAMP_EXPIRY_SECONDS",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_STAGE_INTERVAL_SECONDS",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "assertValidCosign",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "assertValidCosignTest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hashTest",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "checkSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "crossmint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "explicitOwnershipOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "explicitOwnershipsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "getActiveStageFromTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "getCosignDigest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "getCosignDigestTest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "getCosignNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCosigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCrossmintAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalWalletLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxMintableSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberStages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStageInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint80",
              "name": "price",
              "type": "uint80"
            },
            {
              "internalType": "uint32",
              "name": "walletLimit",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint24",
              "name": "maxStageSupply",
              "type": "uint24"
            },
            {
              "internalType": "uint64",
              "name": "startTimeUnixSeconds",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTimeUnixSeconds",
              "type": "uint64"
            }
          ],
          "internalType": "struct IERC721I.MintStageInfo",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenURISuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ownerMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "activeStage",
          "type": "uint256"
        }
      ],
      "name": "setActiveStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setBaseURIPermanent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cosigner",
          "type": "address"
        }
      ],
      "name": "setCosigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "crossmintAddress",
          "type": "address"
        }
      ],
      "name": "setCrossmintAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "globalWalletLimit",
          "type": "uint256"
        }
      ],
      "name": "setGlobalWalletLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxMintableSupply",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintableSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "mintable",
          "type": "bool"
        }
      ],
      "name": "setMintable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint80",
              "name": "price",
              "type": "uint80"
            },
            {
              "internalType": "uint32",
              "name": "walletLimit",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint24",
              "name": "maxStageSupply",
              "type": "uint24"
            },
            {
              "internalType": "uint64",
              "name": "startTimeUnixSeconds",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTimeUnixSeconds",
              "type": "uint64"
            }
          ],
          "internalType": "struct IERC721I.MintStageInfo[]",
          "name": "newStages",
          "type": "tuple[]"
        }
      ],
      "name": "setStages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "suffix",
          "type": "string"
        }
      ],
      "name": "setTokenURISuffix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stop",
          "type": "uint256"
        }
      ],
      "name": "tokensOfOwnerIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "totalMintedByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "price",
          "type": "uint80"
        },
        {
          "internalType": "uint32",
          "name": "walletLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint24",
          "name": "maxStageSupply",
          "type": "uint24"
        },
        {
          "internalType": "uint64",
          "name": "startTimeUnixSeconds",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTimeUnixSeconds",
          "type": "uint64"
        }
      ],
      "name": "updateStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x754d8e25b8e2b03010178893b50d2a35d97035994ca13524a8e3eb1931295107",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3716358",
    "logsBloom": "0x
    "blockHash": "0x38d38d96b82f75d4f1c329e40cbbb8e51ea7be78c082712d80c91017aee06e98",
    "transactionHash": "0x754d8e25b8e2b03010178893b50d2a35d97035994ca13524a8e3eb1931295107",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x754d8e25b8e2b03010178893b50d2a35d97035994ca13524a8e3eb1931295107",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x38d38d96b82f75d4f1c329e40cbbb8e51ea7be78c082712d80c91017aee06e98"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "3716358",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Azuki",
    "AZUKI",
    ".json",
    "10000",
    "5",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "2acb4bdac137d3a583dc49c88a23b845",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collectionSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURISuffix\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxMintableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalWalletLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cosigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotIncreaseMaxMintableSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotUpdatePermanentBaseURI\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CosignerNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CrossmintAddressNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CrossmintOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GlobalWalletLimitOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientStageTimeGap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCosignSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStageArgsLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStartAndEndTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Mintable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSupplyLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMintable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StageSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimestampExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletGlobalLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletStageLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"PermanentBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeStage\",\"type\":\"uint256\"}],\"name\":\"SetActiveStage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"SetBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cosigner\",\"type\":\"address\"}],\"name\":\"SetCosigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"crossmintAddress\",\"type\":\"address\"}],\"name\":\"SetCrossmintAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalWalletLimit\",\"type\":\"uint256\"}],\"name\":\"SetGlobalWalletLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMintableSupply\",\"type\":\"uint256\"}],\"name\":\"SetMaxMintableSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"}],\"name\":\"SetMintable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"price\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"walletLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"maxStageSupply\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startTimeUnixSeconds\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endTimeUnixSeconds\",\"type\":\"uint64\"}],\"name\":\"UpdateStage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CROSSMINT_TIMESTAMP_EXPIRY_SECONDS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAGE_INTERVAL_SECONDS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"qty\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"assertValidCosign\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"assertValidCosignTest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashTest\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"qty\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"crossmint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"getActiveStageFromTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"qty\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"getCosignDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"getCosignDigestTest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"getCosignNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCosigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCrossmintAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxMintableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberStages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStageInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint80\",\"name\":\"price\",\"type\":\"uint80\"},{\"internalType\":\"uint32\",\"name\":\"walletLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"maxStageSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"startTimeUnixSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTimeUnixSeconds\",\"type\":\"uint64\"}],\"internalType\":\"struct IERC721I.MintStageInfo\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenURISuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"qty\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"qty\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"activeStage\",\"type\":\"uint256\"}],\"name\":\"setActiveStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBaseURIPermanent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cosigner\",\"type\":\"address\"}],\"name\":\"setCosigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crossmintAddress\",\"type\":\"address\"}],\"name\":\"setCrossmintAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"globalWalletLimit\",\"type\":\"uint256\"}],\"name\":\"setGlobalWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMintableSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxMintableSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"}],\"name\":\"setMintable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint80\",\"name\":\"price\",\"type\":\"uint80\"},{\"internalType\":\"uint32\",\"name\":\"walletLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"maxStageSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"startTimeUnixSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTimeUnixSeconds\",\"type\":\"uint64\"}],\"internalType\":\"struct IERC721I.MintStageInfo[]\",\"name\":\"newStages\",\"type\":\"tuple[]\"}],\"name\":\"setStages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"suffix\",\"type\":\"string\"}],\"name\":\"setTokenURISuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"totalMintedByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"price\",\"type\":\"uint80\"},{\"internalType\":\"uint32\",\"name\":\"walletLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"maxStageSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"startTimeUnixSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTimeUnixSeconds\",\"type\":\"uint64\"}],\"name\":\"updateStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"explicitOwnershipOf(uint256)\":{\"details\":\"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`\"},\"explicitOwnershipsOf(uint256[])\":{\"details\":\"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokensOfOwner(address)\":{\"details\":\"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine).\"},\"tokensOfOwnerIn(address,uint256,uint256)\":{\"details\":\"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"InvalidQueryRange()\":[{\"notice\":\"Invalid query range (`start` >= `stop`).\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721I.sol\":\"ERC721I\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\"},\"contracts/ERC721I.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"erc721a/contracts/extensions/ERC721AQueryable.sol\\\";\\nimport \\\"./IERC721I.sol\\\";\\n\\ncontract ERC721I is IERC721I, ERC721AQueryable, Ownable, ReentrancyGuard {\\n    using ECDSA for bytes32;\\n\\n    uint64 public constant MIN_STAGE_INTERVAL_SECONDS = 60;\\n    uint64 public constant CROSSMINT_TIMESTAMP_EXPIRY_SECONDS = 300;\\n\\n    bool private _mintable;\\n    string private _currentBaseURI;\\n    uint256 private _activeStage;\\n    uint256 private _maxMintableSupply;\\n    uint256 private _globalWalletLimit;\\n    string private _tokenURISuffix;\\n    bool private _baseURIPermanent;\\n    address private _cosigner;\\n    address private _crossmintAddress;\\n\\n    MintStageInfo[] private _mintStages;\\n\\n    // Need this because struct cannot have nested mapping\\n    mapping(uint256 => mapping(address => uint32)) private _stageMintedCountsPerWallet;\\n    mapping(uint256 => uint256) private _stageMintedCounts;\\n\\n    constructor(\\n        string memory collectionName,\\n        string memory collectionSymbol,\\n        string memory tokenURISuffix,\\n        uint256 maxMintableSupply,\\n        uint256 globalWalletLimit,\\n        address cosigner\\n    ) ERC721A(collectionName, collectionSymbol) {\\n        if (globalWalletLimit > maxMintableSupply) revert GlobalWalletLimitOverflow();\\n\\n        _mintable = false;\\n        _maxMintableSupply = maxMintableSupply;\\n        _globalWalletLimit = globalWalletLimit;\\n        _tokenURISuffix = tokenURISuffix;\\n        _cosigner = cosigner; // ethers.constants.AddressZero for no cosigning\\n    }\\n\\n    modifier canMint() {\\n        if (!_mintable) revert NotMintable();\\n        _;\\n    }\\n\\n    modifier cannotMint() {\\n        if (_mintable) revert Mintable();\\n        _;\\n    }\\n\\n    modifier hasSupply(uint256 qty) {\\n        if (totalSupply() + qty > _maxMintableSupply) revert NoSupplyLeft();\\n        _;\\n    }\\n\\n    function getCosigner() external view override returns (address) {\\n        return _cosigner;\\n    }\\n\\n    function getCosignNonce(address minter) public view returns (uint256) {\\n        return _numberMinted(minter);\\n    }\\n\\n    function setCosigner(address cosigner) external onlyOwner {\\n        _cosigner = cosigner;\\n        emit SetCosigner(cosigner);\\n    }\\n\\n    function getCrossmintAddress() external view override returns (address) {\\n        return _crossmintAddress;\\n    }\\n\\n    function setCrossmintAddress(address crossmintAddress) external onlyOwner {\\n        _crossmintAddress = crossmintAddress;\\n        emit SetCrossmintAddress(crossmintAddress);\\n    }\\n\\n    function setStages(MintStageInfo[] calldata newStages) external onlyOwner {\\n        uint256 originalSize = _mintStages.length;\\n        for (uint256 i = 0; i < originalSize; i++) {\\n            _mintStages.pop();\\n        }\\n\\n        for (uint256 i = 0; i < newStages.length; i++) {\\n            if (i >= 1) {\\n                if (\\n                    newStages[i].startTimeUnixSeconds <\\n                    newStages[i - 1].endTimeUnixSeconds + MIN_STAGE_INTERVAL_SECONDS\\n                ) {\\n                    revert InsufficientStageTimeGap();\\n                }\\n            }\\n            _assertValidStartAndEndTimestamp(\\n                newStages[i].startTimeUnixSeconds,\\n                newStages[i].endTimeUnixSeconds\\n            );\\n            _mintStages.push(\\n                MintStageInfo({\\n                    price: newStages[i].price,\\n                    walletLimit: newStages[i].walletLimit,\\n                    merkleRoot: newStages[i].merkleRoot,\\n                    maxStageSupply: newStages[i].maxStageSupply,\\n                    startTimeUnixSeconds: newStages[i].startTimeUnixSeconds,\\n                    endTimeUnixSeconds: newStages[i].endTimeUnixSeconds\\n                })\\n            );\\n            emit UpdateStage(\\n                i,\\n                newStages[i].price,\\n                newStages[i].walletLimit,\\n                newStages[i].merkleRoot,\\n                newStages[i].maxStageSupply,\\n                newStages[i].startTimeUnixSeconds,\\n                newStages[i].endTimeUnixSeconds\\n            );\\n        }\\n    }\\n\\n    function getMintable() external view override returns (bool) {\\n        return _mintable;\\n    }\\n\\n    function setMintable(bool mintable) external onlyOwner {\\n        _mintable = mintable;\\n        emit SetMintable(mintable);\\n    }\\n\\n    function getNumberStages() external view override returns (uint256) {\\n        return _mintStages.length;\\n    }\\n\\n    function getMaxMintableSupply() external view override returns (uint256) {\\n        return _maxMintableSupply;\\n    }\\n\\n    function setMaxMintableSupply(uint256 maxMintableSupply) external onlyOwner {\\n        if (maxMintableSupply > _maxMintableSupply) {\\n            revert CannotIncreaseMaxMintableSupply();\\n        }\\n        _maxMintableSupply = maxMintableSupply;\\n        emit SetMaxMintableSupply(maxMintableSupply);\\n    }\\n\\n    function getGlobalWalletLimit() external view override returns (uint256) {\\n        return _globalWalletLimit;\\n    }\\n\\n    function setGlobalWalletLimit(uint256 globalWalletLimit) external onlyOwner {\\n        if (globalWalletLimit > _maxMintableSupply) revert GlobalWalletLimitOverflow();\\n        _globalWalletLimit = globalWalletLimit;\\n        emit SetGlobalWalletLimit(globalWalletLimit);\\n    }\\n\\n    function getActiveStage() external view override returns (uint256) {\\n        return _activeStage;\\n    }\\n\\n    function setActiveStage(uint256 activeStage) external onlyOwner {\\n        if (activeStage >= _mintStages.length) revert InvalidStage();\\n        _activeStage = activeStage;\\n        emit SetActiveStage(activeStage);\\n    }\\n\\n    function totalMintedByAddress(address a) external view override returns (uint256) {\\n        return _numberMinted(a);\\n    }\\n\\n    function getStageInfo(uint256 index)\\n        external\\n        view\\n        override\\n        returns (\\n            MintStageInfo memory,\\n            uint32,\\n            uint256\\n        )\\n    {\\n        if (index >= _mintStages.length) {\\n            revert(\\\"InvalidStage\\\");\\n        }\\n        uint32 walletMinted = _stageMintedCountsPerWallet[index][msg.sender];\\n        uint256 stageMinted = _stageMintedCounts[index];\\n        return (_mintStages[index], walletMinted, stageMinted);\\n    }\\n\\n    function updateStage(\\n        uint256 index,\\n        uint80 price,\\n        uint32 walletLimit,\\n        bytes32 merkleRoot,\\n        uint24 maxStageSupply,\\n        uint64 startTimeUnixSeconds,\\n        uint64 endTimeUnixSeconds\\n    ) external onlyOwner {\\n        if (index >= _mintStages.length) revert InvalidStage();\\n        if (index >= 1) {\\n            if (\\n                startTimeUnixSeconds <\\n                _mintStages[index - 1].endTimeUnixSeconds + MIN_STAGE_INTERVAL_SECONDS\\n            ) {\\n                revert InsufficientStageTimeGap();\\n            }\\n        }\\n        _assertValidStartAndEndTimestamp(startTimeUnixSeconds, endTimeUnixSeconds);\\n        _mintStages[index].price = price;\\n        _mintStages[index].walletLimit = walletLimit;\\n        _mintStages[index].merkleRoot = merkleRoot;\\n        _mintStages[index].maxStageSupply = maxStageSupply;\\n        _mintStages[index].startTimeUnixSeconds = startTimeUnixSeconds;\\n        _mintStages[index].endTimeUnixSeconds = endTimeUnixSeconds;\\n\\n        emit UpdateStage(\\n            index,\\n            price,\\n            walletLimit,\\n            merkleRoot,\\n            maxStageSupply,\\n            startTimeUnixSeconds,\\n            endTimeUnixSeconds\\n        );\\n    }\\n\\n    function mint(\\n        uint32 qty,\\n        bytes32[] calldata proof,\\n        uint64 timestamp,\\n        bytes calldata signature\\n    ) external payable nonReentrant {\\n        _mintInternal(qty, msg.sender, proof, timestamp, signature);\\n    }\\n\\n    function crossmint(\\n        uint32 qty,\\n        address to,\\n        bytes32[] calldata proof,\\n        uint64 timestamp,\\n        bytes calldata signature\\n    ) external payable nonReentrant {\\n        if (_crossmintAddress == address(0)) revert CrossmintAddressNotSet();\\n\\n        // Check the caller is Crossmint\\n        if (msg.sender != _crossmintAddress) revert CrossmintOnly();\\n\\n        _mintInternal(qty, to, proof, timestamp, signature);\\n    }\\n\\n    function _mintInternal(\\n        uint32 qty,\\n        address to,\\n        bytes32[] calldata proof,\\n        uint64 timestamp,\\n        bytes calldata signature\\n    ) internal canMint hasSupply(qty) {\\n        uint256 activeStage = _activeStage;\\n\\n        if (activeStage >= _mintStages.length) revert InvalidStage();\\n\\n        MintStageInfo memory stage;\\n        if (_cosigner != address(0)) {\\n            assertValidCosign(msg.sender, qty, timestamp, signature);\\n            _assertValidTimestamp(timestamp);\\n            activeStage = getActiveStageFromTimestamp(timestamp);\\n        }\\n\\n        stage = _mintStages[activeStage];\\n\\n        // Check value\\n        if (msg.value < stage.price * qty) revert NotEnoughValue();\\n\\n        // Check stage supply if applicable\\n        if (stage.maxStageSupply > 0) {\\n            if (_stageMintedCounts[activeStage] + qty > stage.maxStageSupply)\\n                revert StageSupplyExceeded();\\n        }\\n\\n        // Check global wallet limit if applicable\\n        if (_globalWalletLimit > 0) {\\n            if (_numberMinted(to) + qty > _globalWalletLimit) revert WalletGlobalLimitExceeded();\\n        }\\n\\n        // Check wallet limit for stage if applicable, limit == 0 means no limit enforced\\n        if (stage.walletLimit > 0) {\\n            if (_stageMintedCountsPerWallet[activeStage][to] + qty > stage.walletLimit)\\n                revert WalletStageLimitExceeded();\\n        }\\n\\n        // Check merkle proof if applicable, merkleRoot == 0x00...00 means no proof required\\n        if (stage.merkleRoot != 0) {\\n            if (\\n                MerkleProof.processProof(proof, keccak256(abi.encodePacked(to))) != stage.merkleRoot\\n            ) revert InvalidProof();\\n        }\\n\\n        _stageMintedCountsPerWallet[activeStage][to] += qty;\\n        _stageMintedCounts[activeStage] += qty;\\n        _safeMint(to, qty);\\n    }\\n\\n    function ownerMint(uint32 qty, address to) external onlyOwner hasSupply(qty) {\\n        _safeMint(to, qty);\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        uint256 value = address(this).balance;\\n        (bool success, ) = msg.sender.call{value: value}(\\\"\\\");\\n        if (!success) revert WithdrawFailed();\\n        emit Withdraw(value);\\n    }\\n\\n    function setBaseURI(string calldata baseURI) external onlyOwner {\\n        if (_baseURIPermanent) revert CannotUpdatePermanentBaseURI();\\n        _currentBaseURI = baseURI;\\n        emit SetBaseURI(baseURI);\\n    }\\n\\n    function setBaseURIPermanent() external onlyOwner {\\n        _baseURIPermanent = true;\\n        emit PermanentBaseURI(_currentBaseURI);\\n    }\\n\\n    function getTokenURISuffix() external view override returns (string memory) {\\n        return _tokenURISuffix;\\n    }\\n\\n    function setTokenURISuffix(string calldata suffix) external onlyOwner {\\n        _tokenURISuffix = suffix;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721A, IERC721A)\\n        returns (string memory)\\n    {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _currentBaseURI;\\n        return\\n            bytes(baseURI).length != 0\\n                ? string(abi.encodePacked(baseURI, _toString(tokenId), _tokenURISuffix))\\n                : \\\"\\\";\\n    }\\n\\n    function getCosignDigest(\\n        address minter,\\n        uint32 qty,\\n        uint64 timestamp\\n    ) public view returns (bytes32) {\\n        if (_cosigner == address(0)) revert CosignerNotSet();\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    address(this),\\n                    minter,\\n                    qty,\\n                    _cosigner,\\n                    timestamp,\\n                    _chainID(),\\n                    getCosignNonce(minter)\\n                )\\n            ).toEthSignedMessageHash();\\n    }\\n\\n    function assertValidCosign(\\n        address minter,\\n        uint32 qty,\\n        uint64 timestamp,\\n        bytes memory signature\\n    ) public view override {\\n        if (\\n            !SignatureChecker.isValidSignatureNow(\\n                _cosigner,\\n                getCosignDigest(minter, qty, timestamp),\\n                signature\\n            )\\n        ) revert InvalidCosignSignature();\\n    }\\n\\n    function getCosignDigestTest(address addr, uint256 num) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(addr, num)).toEthSignedMessageHash();\\n    }\\n\\n    function assertValidCosignTest(uint256 num, bytes memory signature)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return\\n            SignatureChecker.isValidSignatureNow(\\n                msg.sender,\\n                getCosignDigestTest(msg.sender, num),\\n                signature\\n            );\\n    }\\n\\n    function checkSignature(bytes32 hashTest, bytes memory signature) external view returns (bool) {\\n        return SignatureChecker.isValidSignatureNow(msg.sender, hashTest, signature);\\n    }\\n\\n    function getActiveStageFromTimestamp(uint64 timestamp) public view override returns (uint256) {\\n        for (uint256 i = 0; i < _mintStages.length; i++) {\\n            if (\\n                timestamp >= _mintStages[i].startTimeUnixSeconds &&\\n                timestamp < _mintStages[i].endTimeUnixSeconds\\n            ) {\\n                return i;\\n            }\\n        }\\n        revert InvalidStage();\\n    }\\n\\n    function _assertValidTimestamp(uint64 timestamp) internal view {\\n        uint64 threshold = msg.sender == _crossmintAddress\\n            ? CROSSMINT_TIMESTAMP_EXPIRY_SECONDS\\n            : MIN_STAGE_INTERVAL_SECONDS;\\n        if (timestamp < block.timestamp - threshold) revert TimestampExpired();\\n    }\\n\\n    function _assertValidStartAndEndTimestamp(uint64 start, uint64 end) internal pure {\\n        if (start >= end) revert InvalidStartAndEndTimestamp();\\n    }\\n\\n    function _chainID() private view returns (uint256) {\\n        uint256 chainID;\\n        assembly {\\n            chainID := chainid()\\n        }\\n        return chainID;\\n    }\\n}\\n\",\"keccak256\":\"0x37f672abcb49228c5c0c009bcbd8ecb495692f1e14644d644e75443823547ed1\",\"license\":\"MIT\"},\"contracts/IERC721I.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"erc721a/contracts/extensions/IERC721AQueryable.sol\\\";\\n\\ninterface IERC721I is IERC721AQueryable {\\n    error CannotIncreaseMaxMintableSupply();\\n    error CannotUpdatePermanentBaseURI();\\n    error CosignerNotSet();\\n    error CrossmintAddressNotSet();\\n    error CrossmintOnly();\\n    error GlobalWalletLimitOverflow();\\n    error InsufficientStageTimeGap();\\n    error InvalidCosignSignature();\\n    error InvalidProof();\\n    error InvalidStage();\\n    error InvalidStageArgsLength();\\n    error InvalidStartAndEndTimestamp();\\n    error NoSupplyLeft();\\n    error NotEnoughValue();\\n    error NotMintable();\\n    error Mintable();\\n    error StageSupplyExceeded();\\n    error TimestampExpired();\\n    error WalletGlobalLimitExceeded();\\n    error WalletStageLimitExceeded();\\n    error WithdrawFailed();\\n\\n    struct MintStageInfo {\\n        uint80 price;\\n        uint32 walletLimit; // 0 for unlimited\\n        bytes32 merkleRoot; // 0x0 for no presale enforced\\n        uint24 maxStageSupply; // 0 for unlimited\\n        uint64 startTimeUnixSeconds;\\n        uint64 endTimeUnixSeconds;\\n    }\\n\\n    event UpdateStage(\\n        uint256 stage,\\n        uint80 price,\\n        uint32 walletLimit,\\n        bytes32 merkleRoot,\\n        uint24 maxStageSupply,\\n        uint64 startTimeUnixSeconds,\\n        uint64 endTimeUnixSeconds\\n    );\\n\\n    event SetCosigner(address cosigner);\\n    event SetCrossmintAddress(address crossmintAddress);\\n    event SetMintable(bool mintable);\\n    event SetMaxMintableSupply(uint256 maxMintableSupply);\\n    event SetGlobalWalletLimit(uint256 globalWalletLimit);\\n    event SetActiveStage(uint256 activeStage);\\n    event SetBaseURI(string baseURI);\\n    event PermanentBaseURI(string baseURI);\\n    event Withdraw(uint256 value);\\n\\n    function getCosigner() external view returns (address);\\n\\n    function getCrossmintAddress() external view returns (address);\\n\\n    function getNumberStages() external view returns (uint256);\\n\\n    function getGlobalWalletLimit() external view returns (uint256);\\n\\n    function getMaxMintableSupply() external view returns (uint256);\\n\\n    function getMintable() external view returns (bool);\\n\\n    function totalMintedByAddress(address a) external view returns (uint256);\\n\\n    function getTokenURISuffix() external view returns (string memory);\\n\\n    function getStageInfo(uint256 index)\\n        external\\n        view\\n        returns (\\n            MintStageInfo memory,\\n            uint32,\\n            uint256\\n        );\\n\\n    function getActiveStage() external view returns (uint256);\\n\\n    function getActiveStageFromTimestamp(uint64 timestamp) external view returns (uint256);\\n\\n    function assertValidCosign(\\n        address minter,\\n        uint32 qty,\\n        uint64 timestamp,\\n        bytes memory signature\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x9301adf799c552d62d7d89f4afbbb72338bef69806ccdfacbdc0a5faa3631ae2\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/ERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AQueryable.sol';\\nimport '../ERC721A.sol';\\n\\n/**\\n * @title ERC721AQueryable.\\n *\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) public view virtual override returns (TokenOwnership memory) {\\n        TokenOwnership memory ownership;\\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\\n            return ownership;\\n        }\\n        ownership = _ownershipAt(tokenId);\\n        if (ownership.burned) {\\n            return ownership;\\n        }\\n        return _ownershipOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (TokenOwnership[] memory)\\n    {\\n        unchecked {\\n            uint256 tokenIdsLength = tokenIds.length;\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n            }\\n            return ownerships;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert InvalidQueryRange();\\n            uint256 tokenIdsIdx;\\n            uint256 stopLimit = _nextTokenId();\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            // Set `stop = min(stop, stopLimit)`.\\n            if (stop > stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (start < stop) {\\n                uint256 rangeLength = stop - start;\\n                if (rangeLength < tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = rangeLength;\\n                }\\n            } else {\\n                tokenIdsMaxLength = 0;\\n            }\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n            // We need to call `explicitOwnershipOf(start)`,\\n            // because the slot at `start` may not be initialized.\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\n            address currOwnershipAddr;\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n            if (!ownership.burned) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            address currOwnershipAddr;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            TokenOwnership memory ownership;\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad83a36e9758f044317e9a5e2903bc49730b6d5de8fbe9a61b2f91fb4c2148c7\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/IERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xc14fc938aecdccee7edbd3a3ce60b6171cdc3da3345cfa6d288c268983c48942\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200431e3803806200431e8339810160408190526200003491620001f8565b858560026200004483826200034f565b5060036200005382826200034f565b505060008055506200006533620000e1565b6001600955828211156200008c57604051630590c51360e01b815260040160405180910390fd5b600a805460ff19169055600d839055600e829055600f620000ae85826200034f565b50601080546001600160a01b0390921661010002610100600160a81b0319909216919091179055506200041b9350505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200015b57600080fd5b81516001600160401b038082111562000178576200017862000133565b604051601f8301601f19908116603f01168101908282118183101715620001a357620001a362000133565b81604052838152602092508683858801011115620001c057600080fd5b600091505b83821015620001e45785820183015181830184015290820190620001c5565b600093810190920192909252949350505050565b60008060008060008060c087890312156200021257600080fd5b86516001600160401b03808211156200022a57600080fd5b620002388a838b0162000149565b975060208901519150808211156200024f57600080fd5b6200025d8a838b0162000149565b965060408901519150808211156200027457600080fd5b506200028389828a0162000149565b606089015160808a015160a08b0151929750909550935090506001600160a01b0381168114620002b257600080fd5b809150509295509295509295565b600181811c90821680620002d557607f821691505b602082108103620002f657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200034a57600081815260208120601f850160051c81016020861015620003255750805b601f850160051c820191505b81811015620003465782815560010162000331565b5050505b505050565b81516001600160401b038111156200036b576200036b62000133565b62000383816200037c8454620002c0565b84620002fc565b602080601f831160018114620003bb5760008415620003a25750858301515b600019600386901b1c1916600185901b17855562000346565b600085815260208120601f198616915b82811015620003ec57888601518255948401946001909101908401620003cb565b50858210156200040b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b613ef3806200042b6000396000f3fe6080604052600436106103505760003560e01c8063831c9e2e116101c6578063a9852bfb116100f7578063e985e9c511610095578063efdaa2ec1161006f578063efdaa2ec146109f1578063f2fde38b14610a06578063f698bceb14610a26578063f8d0969614610a3e57600080fd5b8063e985e9c514610975578063ea7ac873146109be578063efb6b11f146109de57600080fd5b8063b7a9fa60116100d1578063b7a9fa6014610900578063b88d4fde14610915578063c23dc68f14610928578063c87b56dd1461095557600080fd5b8063a9852bfb146108a0578063aac5ab1f146108c0578063b50248e7146108e057600080fd5b806397cf84fc116101645780639a3814ab1161013e5780639a3814ab146107cf578063a06c492f1461076f578063a22cb465146107e4578063a3759f601461080457600080fd5b806397cf84fc1461076f578063997556241461078f57806399a2557a146107af57600080fd5b80638da5cb5b116101a05780638da5cb5b146106fe5780638dcdb09d1461071c5780638f9315111461073c57806395d89b411461075a57600080fd5b8063831c9e2e146106915780638462151c146106b1578063896086de146106de57600080fd5b80633ccfd60b116102a057806367808a341161023e57806370da24ee1161021857806370da24ee14610632578063715018a61461064757806373e1607e1461065c57806374d186621461067c57600080fd5b806367808a34146105d25780636e6277b1146105f257806370a082311461061257600080fd5b806355f804b31161027a57806355f804b3146105525780635bbb21771461057257806362acbd9a1461059f5780636352211e146105b257600080fd5b80633ccfd60b1461051557806342842e0e1461052a5780634b1c53b41461053d57600080fd5b8063174f909c1161030d57806323b872dd116102e757806323b872dd1461049f578063285d70d4146104b257806333bbbf06146104d2578063372992e4146104f557600080fd5b8063174f909c1461042e57806318160ddd1461045c5780631ce03eed1461047f57600080fd5b806301ffc9a714610355578063020451381461038a57806306fdde03146103ac578063081812fc146103ce578063095ea7b3146104065780631053a81514610419575b600080fd5b34801561036157600080fd5b5061037561037036600461318e565b610a5e565b60405190151581526020015b60405180910390f35b34801561039657600080fd5b506103aa6103a53660046131c7565b610ab0565b005b3480156103b857600080fd5b506103c1610b15565b6040516103819190613232565b3480156103da57600080fd5b506103ee6103e9366004613245565b610ba7565b6040516001600160a01b039091168152602001610381565b6103aa61041436600461325e565b610beb565b34801561042557600080fd5b506103aa610c8b565b34801561043a57600080fd5b5061044461012c81565b6040516001600160401b039091168152602001610381565b34801561046857600080fd5b50600154600054035b604051908152602001610381565b34801561048b57600080fd5b5061047161049a3660046132b3565b610cdb565b6103aa6104ad3660046132f6565b610e0e565b3480156104be57600080fd5b506103aa6104cd366004613342565b610fa7565b3480156104de57600080fd5b5060105461010090046001600160a01b03166103ee565b34801561050157600080fd5b506103aa610510366004613245565b610ff0565b34801561052157600080fd5b506103aa611050565b6103aa6105383660046132f6565b6110fb565b34801561054957600080fd5b50600d54610471565b34801561055e57600080fd5b506103aa61056d36600461339e565b61111b565b34801561057e57600080fd5b5061059261058d366004613423565b611186565b6040516103819190613494565b6103aa6105ad3660046134d6565b611251565b3480156105be57600080fd5b506103ee6105cd366004613245565b61131e565b3480156105de57600080fd5b506104716105ed36600461357a565b611329565b3480156105fe57600080fd5b5061047161060d36600461325e565b6113f1565b34801561061e57600080fd5b5061047161062d3660046131c7565b61141e565b34801561063e57600080fd5b50601254610471565b34801561065357600080fd5b506103aa61146c565b34801561066857600080fd5b506103aa6106773660046135bf565b611480565b34801561068857600080fd5b50610444603c81565b34801561069d57600080fd5b506103756106ac3660046136d9565b611710565b3480156106bd57600080fd5b506106d16106cc3660046131c7565b61171d565b604051610381919061371f565b3480156106ea57600080fd5b506103aa6106f9366004613245565b611825565b34801561070a57600080fd5b506008546001600160a01b03166103ee565b34801561072857600080fd5b506103aa610737366004613757565b611884565b34801561074857600080fd5b506011546001600160a01b03166103ee565b34801561076657600080fd5b506103c1611d47565b34801561077b57600080fd5b5061047161078a3660046131c7565b611d56565b34801561079b57600080fd5b506103aa6107aa3660046131c7565b611d80565b3480156107bb57600080fd5b506106d16107ca3660046137cb565b611dd6565b3480156107db57600080fd5b50600c54610471565b3480156107f057600080fd5b506103aa6107ff3660046137fe565b611f4d565b34801561081057600080fd5b5061082461081f366004613245565b611fb9565b6040805184516001600160501b0316815260208086015163ffffffff90811691830191909152858301519282019290925260608086015162ffffff16908201526080808601516001600160401b039081169183019190915260a095860151169481019490945290911660c083015260e082015261010001610381565b3480156108ac57600080fd5b506103aa6108bb36600461339e565b6120fd565b3480156108cc57600080fd5b506103aa6108db366004613831565b612112565b3480156108ec57600080fd5b506103aa6108fb36600461385b565b61216b565b34801561090c57600080fd5b506103c16121ad565b6103aa6109233660046138c9565b6121bc565b34801561093457600080fd5b50610948610943366004613245565b612200565b6040516103819190613918565b34801561096157600080fd5b506103c1610970366004613245565b612278565b34801561098157600080fd5b50610375610990366004613926565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3480156109ca57600080fd5b506103756109d93660046136d9565b612381565b6103aa6109ec366004613942565b612397565b3480156109fd57600080fd5b50600e54610471565b348015610a1257600080fd5b506103aa610a213660046131c7565b61240a565b348015610a3257600080fd5b50600a5460ff16610375565b348015610a4a57600080fd5b506103aa610a59366004613245565b612483565b60006301ffc9a760e01b6001600160e01b031983161480610a8f57506380ac58cd60e01b6001600160e01b03198316145b80610aaa5750635b5e139f60e01b6001600160e01b03198316145b92915050565b610ab86124e3565b60108054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527faea1573caf7b4fdd079b947d86c1be6c725642c47582f8f9bd2c7d2a30bf0bd9906020015b60405180910390a150565b606060028054610b24906139d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610b50906139d5565b8015610b9d5780601f10610b7257610100808354040283529160200191610b9d565b820191906000526020600020905b815481529060010190602001808311610b8057829003601f168201915b5050505050905090565b6000610bb28261253d565b610bcf576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610bf68261131e565b9050336001600160a01b03821614610c2f57610c128133610990565b610c2f576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610c936124e3565b6010805460ff191660011790556040517fc6a6c2b165e62c9d37fc51a18ed76e5be22304bc1d337877c98f31c23e40b0f590610cd190600b90613a0f565b60405180910390a1565b60105460009061010090046001600160a01b0316610d0c576040516353bd4fb360e11b815260040160405180910390fd5b610e04308585601060019054906101000a90046001600160a01b031686610d304690565b610d398b611d56565b604051606097881b6001600160601b0319908116602083015296881b8716603482015260e09590951b6001600160e01b031916604886015292861b909416604c84015260c01b6001600160c01b031916938201939093526068810191909152608881019190915260a8015b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b90505b9392505050565b6000610e1982612564565b9050836001600160a01b0316816001600160a01b031614610e4c5760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b03881690911417610e9957610e7c8633610990565b610e9957604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038516610ec057604051633a954ecd60e21b815260040160405180910390fd5b8015610ecb57600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b84169003610f5d57600184016000818152600460205260408120549003610f5b576000548114610f5b5760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b610faf6124e3565b600a805460ff19168215159081179091556040519081527fe717a2bfc51e250b028aaac5eb448e76f4df26b9609956782bff49097bb792cf90602001610b0a565b610ff86124e3565b600d5481111561101b57604051630590c51360e01b815260040160405180910390fd5b600e8190556040518181527f5307de8ad7d34d5ddfd5171435c143bdc645493980f453eb5d7cdb3e494a1b3590602001610b0a565b6110586124e3565b6040514790600090339083908381818185875af1925050503d806000811461109c576040519150601f19603f3d011682016040523d82523d6000602084013e6110a1565b606091505b50509050806110c357604051631d42c86760e21b815260040160405180910390fd5b6040518281527f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d906020015b60405180910390a15050565b611116838383604051806020016040528060008152506121bc565b505050565b6111236124e3565b60105460ff1615611147576040516306ccad4160e41b815260040160405180910390fd5b600b611154828483613ae0565b507f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa82826040516110ef929190613b9f565b6060816000816001600160401b038111156111a3576111a3613637565b6040519080825280602002602001820160405280156111f557816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816111c15790505b50905060005b8281146112485761122386868381811061121757611217613bce565b90506020020135612200565b82828151811061123557611235613bce565b60209081029190910101526001016111fb565b50949350505050565b6002600954036112a85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026009556011546001600160a01b03166112d657604051637e9f68eb60e11b815260040160405180910390fd5b6011546001600160a01b031633146113015760405163f46fd68360e01b815260040160405180910390fd5b611310878787878787876125cb565b505060016009555050505050565b6000610aaa82612564565b6000805b6012548110156113d7576012818154811061134a5761134a613bce565b60009182526020909120600260039092020101546001600160401b0363010000009091048116908416108015906113ba57506012818154811061138f5761138f613bce565b60009182526020909120600260039092020101546001600160401b03600160581b9091048116908416105b156113c55792915050565b806113cf81613bfa565b91505061132d565b5060405163e82a532960e01b815260040160405180910390fd5b6040516001600160601b0319606084901b16602082015260348101829052600090610e0790605401610da4565b60006001600160a01b038216611447576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6114746124e3565b61147e6000612a36565b565b6114886124e3565b60125487106114aa5760405163e82a532960e01b815260040160405180910390fd5b6001871061153257603c60126114c160018a613c13565b815481106114d1576114d1613bce565b9060005260206000209060030201600201600b9054906101000a90046001600160401b03166115009190613c26565b6001600160401b0316826001600160401b0316101561153257604051636bc1af9360e01b815260040160405180910390fd5b61153c8282612a88565b856012888154811061155057611550613bce565b906000526020600020906003020160000160006101000a8154816001600160501b0302191690836001600160501b03160217905550846012888154811061159957611599613bce565b9060005260206000209060030201600001600a6101000a81548163ffffffff021916908363ffffffff16021790555083601288815481106115dc576115dc613bce565b906000526020600020906003020160010181905550826012888154811061160557611605613bce565b906000526020600020906003020160020160006101000a81548162ffffff021916908362ffffff160217905550816012888154811061164657611646613bce565b906000526020600020906003020160020160036101000a8154816001600160401b0302191690836001600160401b03160217905550806012888154811061168f5761168f613bce565b9060005260206000209060030201600201600b6101000a8154816001600160401b0302191690836001600160401b031602179055507fb3268648542a1bb1b2dd12e3b14aeb5a3ab22c592de96bdd3e842154a5b394fa878787878787876040516116ff9796959493929190613c4d565b60405180910390a150505050505050565b6000610e07338484612abe565b6060600080600061172d8561141e565b90506000816001600160401b0381111561174957611749613637565b604051908082528060200260200182016040528015611772578160200160208202803683370190505b50905061179f60408051608081018252600080825260208201819052918101829052606081019190915290565b60005b838614611819576117b281612c00565b915081604001516118115781516001600160a01b0316156117d257815194505b876001600160a01b0316856001600160a01b031603611811578083878060010198508151811061180457611804613bce565b6020026020010181815250505b6001016117a2565b50909695505050505050565b61182d6124e3565b601254811061184f5760405163e82a532960e01b815260040160405180910390fd5b600c8190556040518181527f160d6de2c069c3adf7f4c1252236d0b325c0e3eb963ddb10c67a81aadf9a305890602001610b0a565b61188c6124e3565b60125460005b818110156119075760128054806118ab576118ab613c9d565b60008281526020812060036000199093019283020180546001600160701b03191681556001810191909155600201805472ffffffffffffffffffffffffffffffffffffff191690559055806118ff81613bfa565b915050611892565b5060005b82811015611d4157600181106119b657603c848461192a600185613c13565b81811061193957611939613bce565b905060c0020160a0016020810190611951919061357a565b61195b9190613c26565b6001600160401b031684848381811061197657611976613bce565b905060c00201608001602081019061198e919061357a565b6001600160401b031610156119b657604051636bc1af9360e01b815260040160405180910390fd5b611a128484838181106119cb576119cb613bce565b905060c0020160800160208101906119e3919061357a565b8585848181106119f5576119f5613bce565b905060c0020160a0016020810190611a0d919061357a565b612a88565b60126040518060c00160405280868685818110611a3157611a31613bce565b611a4792602060c0909202019081019150613cb3565b6001600160501b03168152602001868685818110611a6757611a67613bce565b905060c002016020016020810190611a7f9190613cce565b63ffffffff168152602001868685818110611a9c57611a9c613bce565b905060c00201604001358152602001868685818110611abd57611abd613bce565b905060c002016060016020810190611ad59190613ce9565b62ffffff168152602001868685818110611af157611af1613bce565b905060c002016080016020810190611b09919061357a565b6001600160401b03168152602001868685818110611b2957611b29613bce565b905060c0020160a0016020810190611b41919061357a565b6001600160401b039081169091528254600181810185556000948552602094859020845160039093020180549585015163ffffffff16600160501b026001600160701b03199096166001600160501b0390931692909217949094178155604083015193810193909355606082015160029093018054608084015160a0909401518316600160581b0267ffffffffffffffff60581b19949093166301000000026affffffffffffffffffffff1990911662ffffff9095169490941793909317919091161790557fb3268648542a1bb1b2dd12e3b14aeb5a3ab22c592de96bdd3e842154a5b394fa81858582818110611c3a57611c3a613bce565b611c5092602060c0909202019081019150613cb3565b868685818110611c6257611c62613bce565b905060c002016020016020810190611c7a9190613cce565b878786818110611c8c57611c8c613bce565b905060c0020160400135888887818110611ca857611ca8613bce565b905060c002016060016020810190611cc09190613ce9565b898988818110611cd257611cd2613bce565b905060c002016080016020810190611cea919061357a565b8a8a89818110611cfc57611cfc613bce565b905060c0020160a0016020810190611d14919061357a565b604051611d279796959493929190613c4d565b60405180910390a180611d3981613bfa565b91505061190b565b50505050565b606060038054610b24906139d5565b6001600160a01b038116600090815260056020526040808220546001600160401b03911c16610aaa565b611d886124e3565b601180546001600160a01b0319166001600160a01b0383169081179091556040519081527ff477d93c015f2a73c2ccc5ed37078d12123b80fc5d12e0014c60b913bc1a1ec490602001610b0a565b6060818310611df857604051631960ccad60e11b815260040160405180910390fd5b600080611e0460005490565b905080841115611e12578093505b6000611e1d8761141e565b905084861015611e3c5785850381811015611e36578091505b50611e40565b5060005b6000816001600160401b03811115611e5a57611e5a613637565b604051908082528060200260200182016040528015611e83578160200160208202803683370190505b50905081600003611e99579350610e0792505050565b6000611ea488612200565b905060008160400151611eb5575080515b885b888114158015611ec75750848714155b15611f3c57611ed581612c00565b92508260400151611f345782516001600160a01b031615611ef557825191505b8a6001600160a01b0316826001600160a01b031603611f345780848880600101995081518110611f2757611f27613bce565b6020026020010181815250505b600101611eb7565b505050928352509095945050505050565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152601254600090819084106120305760405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964537461676560a01b604482015260640161129f565b60008481526013602090815260408083203384528252808320548784526014909252909120546012805463ffffffff909316928790811061207357612073613bce565b60009182526020918290206040805160c08101825260039390930290910180546001600160501b0381168452600160501b900463ffffffff169383019390935260018301549082015260029091015462ffffff81166060830152630100000081046001600160401b039081166080840152600160581b9091041660a0820152969195509350915050565b6121056124e3565b600f611116828483613ae0565b61211a6124e3565b8163ffffffff16600d54816121326001546000540390565b61213c9190613d04565b111561215b5760405163800113cb60e01b815260040160405180910390fd5b611116828463ffffffff16612c3c565b6010546121919061010090046001600160a01b031661218b868686610cdb565b83612abe565b611d415760405162b7fad960e11b815260040160405180910390fd5b6060600f8054610b24906139d5565b6121c7848484610e0e565b6001600160a01b0383163b15611d41576121e384848484612c56565b611d41576040516368d2bf6b60e11b815260040160405180910390fd5b60408051608080820183526000808352602080840182905283850182905260608085018390528551938401865282845290830182905293820181905292810183905290915060005483106122545792915050565b61225d83612c00565b905080604001511561226f5792915050565b610e0783612d41565b60606122838261253d565b6122a057604051630a14c4b560e41b815260040160405180910390fd5b6000600b80546122af906139d5565b80601f01602080910402602001604051908101604052809291908181526020018280546122db906139d5565b80156123285780601f106122fd57610100808354040283529160200191612328565b820191906000526020600020905b81548152906001019060200180831161230b57829003601f168201915b50505050509050805160000361234d5760405180602001604052806000815250610e07565b8061235784612d76565b600f60405160200161236b93929190613d17565b6040516020818303038152906040529392505050565b6000610e073361239133866113f1565b84612abe565b6002600954036123e95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161129f565b60026009556123fd863387878787876125cb565b5050600160095550505050565b6124126124e3565b6001600160a01b0381166124775760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161129f565b61248081612a36565b50565b61248b6124e3565b600d548111156124ae5760405163430b83b160e11b815260040160405180910390fd5b600d8190556040518181527fc7bbc2b288fc13314546ea4aa51f6bcf71b7ba4740beeb3d32e9acef57b6668a90602001610b0a565b6008546001600160a01b0316331461147e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161129f565b6000805482108015610aaa575050600090815260046020526040902054600160e01b161590565b6000816000548110156125b25760008181526004602052604081205490600160e01b821690036125b0575b80600003610e0757506000190160008181526004602052604090205461258f565b505b604051636f96cda160e11b815260040160405180910390fd5b600a5460ff166125ee57604051630952c8a960e11b815260040160405180910390fd5b8663ffffffff16600d54816126066001546000540390565b6126109190613d04565b111561262f5760405163800113cb60e01b815260040160405180910390fd5b600c5460125481106126545760405163e82a532960e01b815260040160405180910390fd5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260105461010090046001600160a01b0316156126f3576126de338b8888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061216b92505050565b6126e786612dba565b6126f086611329565b91505b6012828154811061270657612706613bce565b60009182526020918290206040805160c081018252600390930290910180546001600160501b03811680855263ffffffff600160501b9092048216958501959095526001820154928401929092526002015462ffffff811660608401526001600160401b036301000000820481166080850152600160581b9091041660a083015290925061279791908c1690613db7565b6001600160501b03163410156127c057604051630717c22560e51b815260040160405180910390fd5b606081015162ffffff161561281a57606081015160008381526014602052604090205462ffffff909116906127fc9063ffffffff8d1690613d04565b111561281a5760405162d0844960e21b815260040160405180910390fd5b600e541561288157600e548a63ffffffff166128588b6001600160a01b03166000908152600560205260409081902054901c6001600160401b031690565b6128629190613d04565b11156128815760405163751304ed60e11b815260040160405180910390fd5b602081015163ffffffff16156128f35760208082015160008481526013835260408082206001600160a01b038e168352909352919091205463ffffffff918216916128ce918d9116613de2565b63ffffffff1611156128f35760405163b4f3729b60e01b815260040160405180910390fd5b6040810151156129955780604001516129778989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060405161295c92508e915060200160609190911b6001600160601b031916815260140190565b60405160208183030381529060405280519060200120612e18565b14612995576040516309bde33960e01b815260040160405180910390fd5b60008281526013602090815260408083206001600160a01b038d168452909152812080548c92906129cd90849063ffffffff16613de2565b92506101000a81548163ffffffff021916908363ffffffff1602179055508963ffffffff16601460008481526020019081526020016000206000828254612a149190613d04565b90915550612a2a90508963ffffffff8c16612c3c565b50505050505050505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b806001600160401b0316826001600160401b031610612aba57604051631750215560e11b815260040160405180910390fd5b5050565b6000806000612acd8585612e65565b90925090506000816004811115612ae657612ae6613dff565b148015612b045750856001600160a01b0316826001600160a01b0316145b15612b1457600192505050610e07565b600080876001600160a01b0316631626ba7e60e01b8888604051602401612b3c929190613e15565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612b7a9190613e2e565b600060405180830381855afa9150503d8060008114612bb5576040519150601f19603f3d011682016040523d82523d6000602084013e612bba565b606091505b5091509150818015612bcd575080516020145b8015612bf457508051630b135d3f60e11b90612bf29083016020908101908401613e4a565b145b98975050505050505050565b604080516080810182526000808252602082018190529181018290526060810191909152600082815260046020526040902054610aaa90612eaa565b612aba828260405180602001604052806000815250612ef1565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290612c8b903390899088908890600401613e63565b6020604051808303816000875af1925050508015612cc6575060408051601f3d908101601f19168201909252612cc391810190613ea0565b60015b612d24573d808015612cf4576040519150601f19603f3d011682016040523d82523d6000602084013e612cf9565b606091505b508051600003612d1c576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b604080516080810182526000808252602082018190529181018290526060810191909152610aaa612d7183612564565b612eaa565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a900480612d905750819003601f19909101908152919050565b6011546000906001600160a01b03163314612dd657603c612dda565b61012c5b9050612def6001600160401b03821642613c13565b826001600160401b03161015612aba576040516313634e8d60e11b815260040160405180910390fd5b600081815b8451811015612e5d57612e4982868381518110612e3c57612e3c613bce565b6020026020010151612f5e565b915080612e5581613bfa565b915050612e1d565b509392505050565b6000808251604103612e9b5760208301516040840151606085015160001a612e8f87828585612f8d565b94509450505050612ea3565b506000905060025b9250929050565b604080516080810182526001600160a01b038316815260a083901c6001600160401b03166020820152600160e01b831615159181019190915260e89190911c606082015290565b612efb838361307a565b6001600160a01b0383163b15611116576000548281035b612f256000868380600101945086612c56565b612f42576040516368d2bf6b60e11b815260040160405180910390fd5b818110612f12578160005414612f5757600080fd5b5050505050565b6000818310612f7a576000828152602084905260409020610e07565b6000838152602083905260409020610e07565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612fc45750600090506003613071565b8460ff16601b14158015612fdc57508460ff16601c14155b15612fed5750600090506004613071565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613041573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661306a57600060019250925050613071565b9150600090505b94509492505050565b600080549082900361309f5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b81811461314e57808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600101613116565b508160000361316f57604051622e076360e81b815260040160405180910390fd5b60005550505050565b6001600160e01b03198116811461248057600080fd5b6000602082840312156131a057600080fd5b8135610e0781613178565b80356001600160a01b03811681146131c257600080fd5b919050565b6000602082840312156131d957600080fd5b610e07826131ab565b60005b838110156131fd5781810151838201526020016131e5565b50506000910152565b6000815180845261321e8160208601602086016131e2565b601f01601f19169290920160200192915050565b602081526000610e076020830184613206565b60006020828403121561325757600080fd5b5035919050565b6000806040838503121561327157600080fd5b61327a836131ab565b946020939093013593505050565b803563ffffffff811681146131c257600080fd5b80356001600160401b03811681146131c257600080fd5b6000806000606084860312156132c857600080fd5b6132d1846131ab565b92506132df60208501613288565b91506132ed6040850161329c565b90509250925092565b60008060006060848603121561330b57600080fd5b613314846131ab565b9250613322602085016131ab565b9150604084013590509250925092565b803580151581146131c257600080fd5b60006020828403121561335457600080fd5b610e0782613332565b60008083601f84011261336f57600080fd5b5081356001600160401b0381111561338657600080fd5b602083019150836020828501011115612ea357600080fd5b600080602083850312156133b157600080fd5b82356001600160401b038111156133c757600080fd5b6133d38582860161335d565b90969095509350505050565b60008083601f8401126133f157600080fd5b5081356001600160401b0381111561340857600080fd5b6020830191508360208260051b8501011115612ea357600080fd5b6000806020838503121561343657600080fd5b82356001600160401b0381111561344c57600080fd5b6133d3858286016133df565b80516001600160a01b031682526020808201516001600160401b03169083015260408082015115159083015260609081015162ffffff16910152565b6020808252825182820181905260009190848201906040850190845b81811015611819576134c3838551613458565b92840192608092909201916001016134b0565b600080600080600080600060a0888a0312156134f157600080fd5b6134fa88613288565b9650613508602089016131ab565b955060408801356001600160401b038082111561352457600080fd5b6135308b838c016133df565b909750955085915061354460608b0161329c565b945060808a013591508082111561355a57600080fd5b506135678a828b0161335d565b989b979a50959850939692959293505050565b60006020828403121561358c57600080fd5b610e078261329c565b80356001600160501b03811681146131c257600080fd5b803562ffffff811681146131c257600080fd5b600080600080600080600060e0888a0312156135da57600080fd5b873596506135ea60208901613595565b95506135f860408901613288565b94506060880135935061360d608089016135ac565b925061361b60a0890161329c565b915061362960c0890161329c565b905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261365e57600080fd5b81356001600160401b038082111561367857613678613637565b604051601f8301601f19908116603f011681019082821181831017156136a0576136a0613637565b816040528381528660208588010111156136b957600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156136ec57600080fd5b8235915060208301356001600160401b0381111561370957600080fd5b6137158582860161364d565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156118195783518352928401929184019160010161373b565b6000806020838503121561376a57600080fd5b82356001600160401b038082111561378157600080fd5b818501915085601f83011261379557600080fd5b8135818111156137a457600080fd5b86602060c0830285010111156137b957600080fd5b60209290920196919550909350505050565b6000806000606084860312156137e057600080fd5b6137e9846131ab565b95602085013595506040909401359392505050565b6000806040838503121561381157600080fd5b61381a836131ab565b915061382860208401613332565b90509250929050565b6000806040838503121561384457600080fd5b61384d83613288565b9150613828602084016131ab565b6000806000806080858703121561387157600080fd5b61387a856131ab565b935061388860208601613288565b92506138966040860161329c565b915060608501356001600160401b038111156138b157600080fd5b6138bd8782880161364d565b91505092959194509250565b600080600080608085870312156138df57600080fd5b6138e8856131ab565b93506138f6602086016131ab565b92506040850135915060608501356001600160401b038111156138b157600080fd5b60808101610aaa8284613458565b6000806040838503121561393957600080fd5b61384d836131ab565b6000806000806000806080878903121561395b57600080fd5b61396487613288565b955060208701356001600160401b038082111561398057600080fd5b61398c8a838b016133df565b90975095508591506139a060408a0161329c565b945060608901359150808211156139b657600080fd5b506139c389828a0161335d565b979a9699509497509295939492505050565b600181811c908216806139e957607f821691505b602082108103613a0957634e487b7160e01b600052602260045260246000fd5b50919050565b6000602080835260008454613a23816139d5565b80848701526040600180841660008114613a445760018114613a5e57613a8c565b60ff1985168984015283151560051b890183019550613a8c565b896000528660002060005b85811015613a845781548b8201860152908301908801613a69565b8a0184019650505b509398975050505050505050565b601f82111561111657600081815260208120601f850160051c81016020861015613ac15750805b601f850160051c820191505b81811015610f9f57828155600101613acd565b6001600160401b03831115613af757613af7613637565b613b0b83613b0583546139d5565b83613a9a565b6000601f841160018114613b3f5760008515613b275750838201355b600019600387901b1c1916600186901b178355612f57565b600083815260209020601f19861690835b82811015613b705786850135825560209485019460019092019101613b50565b5086821015613b8d5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613c0c57613c0c613be4565b5060010190565b81810381811115610aaa57610aaa613be4565b6001600160401b03818116838216019080821115613c4657613c46613be4565b5092915050565b9687526001600160501b0395909516602087015263ffffffff939093166040860152606085019190915262ffffff1660808401526001600160401b0390811660a08401521660c082015260e00190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613cc557600080fd5b610e0782613595565b600060208284031215613ce057600080fd5b610e0782613288565b600060208284031215613cfb57600080fd5b610e07826135ac565b80820180821115610aaa57610aaa613be4565b600084516020613d2a8285838a016131e2565b855191840191613d3d8184848a016131e2565b8554920191600090613d4e816139d5565b60018281168015613d665760018114613d7b57613da7565b60ff1984168752821515830287019450613da7565b896000528560002060005b84811015613d9f57815489820152908301908701613d86565b505082870194505b50929a9950505050505050505050565b6001600160501b03818116838216028082169190828114613dda57613dda613be4565b505092915050565b63ffffffff818116838216019080821115613c4657613c46613be4565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610e046040830184613206565b60008251613e408184602087016131e2565b9190910192915050565b600060208284031215613e5c57600080fd5b5051919050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613e9690830184613206565b9695505050505050565b600060208284031215613eb257600080fd5b8151610e078161317856fea2646970667358221220798db08bb94687017f771fa49e152da7ee0ebe4cf2b9e1965cffb1b653620b6c64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103505760003560e01c8063831c9e2e116101c6578063a9852bfb116100f7578063e985e9c511610095578063efdaa2ec1161006f578063efdaa2ec146109f1578063f2fde38b14610a06578063f698bceb14610a26578063f8d0969614610a3e57600080fd5b8063e985e9c514610975578063ea7ac873146109be578063efb6b11f146109de57600080fd5b8063b7a9fa60116100d1578063b7a9fa6014610900578063b88d4fde14610915578063c23dc68f14610928578063c87b56dd1461095557600080fd5b8063a9852bfb146108a0578063aac5ab1f146108c0578063b50248e7146108e057600080fd5b806397cf84fc116101645780639a3814ab1161013e5780639a3814ab146107cf578063a06c492f1461076f578063a22cb465146107e4578063a3759f601461080457600080fd5b806397cf84fc1461076f578063997556241461078f57806399a2557a146107af57600080fd5b80638da5cb5b116101a05780638da5cb5b146106fe5780638dcdb09d1461071c5780638f9315111461073c57806395d89b411461075a57600080fd5b8063831c9e2e146106915780638462151c146106b1578063896086de146106de57600080fd5b80633ccfd60b116102a057806367808a341161023e57806370da24ee1161021857806370da24ee14610632578063715018a61461064757806373e1607e1461065c57806374d186621461067c57600080fd5b806367808a34146105d25780636e6277b1146105f257806370a082311461061257600080fd5b806355f804b31161027a57806355f804b3146105525780635bbb21771461057257806362acbd9a1461059f5780636352211e146105b257600080fd5b80633ccfd60b1461051557806342842e0e1461052a5780634b1c53b41461053d57600080fd5b8063174f909c1161030d57806323b872dd116102e757806323b872dd1461049f578063285d70d4146104b257806333bbbf06146104d2578063372992e4146104f557600080fd5b8063174f909c1461042e57806318160ddd1461045c5780631ce03eed1461047f57600080fd5b806301ffc9a714610355578063020451381461038a57806306fdde03146103ac578063081812fc146103ce578063095ea7b3146104065780631053a81514610419575b600080fd5b34801561036157600080fd5b5061037561037036600461318e565b610a5e565b60405190151581526020015b60405180910390f35b34801561039657600080fd5b506103aa6103a53660046131c7565b610ab0565b005b3480156103b857600080fd5b506103c1610b15565b6040516103819190613232565b3480156103da57600080fd5b506103ee6103e9366004613245565b610ba7565b6040516001600160a01b039091168152602001610381565b6103aa61041436600461325e565b610beb565b34801561042557600080fd5b506103aa610c8b565b34801561043a57600080fd5b5061044461012c81565b6040516001600160401b039091168152602001610381565b34801561046857600080fd5b50600154600054035b604051908152602001610381565b34801561048b57600080fd5b5061047161049a3660046132b3565b610cdb565b6103aa6104ad3660046132f6565b610e0e565b3480156104be57600080fd5b506103aa6104cd366004613342565b610fa7565b3480156104de57600080fd5b5060105461010090046001600160a01b03166103ee565b34801561050157600080fd5b506103aa610510366004613245565b610ff0565b34801561052157600080fd5b506103aa611050565b6103aa6105383660046132f6565b6110fb565b34801561054957600080fd5b50600d54610471565b34801561055e57600080fd5b506103aa61056d36600461339e565b61111b565b34801561057e57600080fd5b5061059261058d366004613423565b611186565b6040516103819190613494565b6103aa6105ad3660046134d6565b611251565b3480156105be57600080fd5b506103ee6105cd366004613245565b61131e565b3480156105de57600080fd5b506104716105ed36600461357a565b611329565b3480156105fe57600080fd5b5061047161060d36600461325e565b6113f1565b34801561061e57600080fd5b5061047161062d3660046131c7565b61141e565b34801561063e57600080fd5b50601254610471565b34801561065357600080fd5b506103aa61146c565b34801561066857600080fd5b506103aa6106773660046135bf565b611480565b34801561068857600080fd5b50610444603c81565b34801561069d57600080fd5b506103756106ac3660046136d9565b611710565b3480156106bd57600080fd5b506106d16106cc3660046131c7565b61171d565b604051610381919061371f565b3480156106ea57600080fd5b506103aa6106f9366004613245565b611825565b34801561070a57600080fd5b506008546001600160a01b03166103ee565b34801561072857600080fd5b506103aa610737366004613757565b611884565b34801561074857600080fd5b506011546001600160a01b03166103ee565b34801561076657600080fd5b506103c1611d47565b34801561077b57600080fd5b5061047161078a3660046131c7565b611d56565b34801561079b57600080fd5b506103aa6107aa3660046131c7565b611d80565b3480156107bb57600080fd5b506106d16107ca3660046137cb565b611dd6565b3480156107db57600080fd5b50600c54610471565b3480156107f057600080fd5b506103aa6107ff3660046137fe565b611f4d565b34801561081057600080fd5b5061082461081f366004613245565b611fb9565b6040805184516001600160501b0316815260208086015163ffffffff90811691830191909152858301519282019290925260608086015162ffffff16908201526080808601516001600160401b039081169183019190915260a095860151169481019490945290911660c083015260e082015261010001610381565b3480156108ac57600080fd5b506103aa6108bb36600461339e565b6120fd565b3480156108cc57600080fd5b506103aa6108db366004613831565b612112565b3480156108ec57600080fd5b506103aa6108fb36600461385b565b61216b565b34801561090c57600080fd5b506103c16121ad565b6103aa6109233660046138c9565b6121bc565b34801561093457600080fd5b50610948610943366004613245565b612200565b6040516103819190613918565b34801561096157600080fd5b506103c1610970366004613245565b612278565b34801561098157600080fd5b50610375610990366004613926565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3480156109ca57600080fd5b506103756109d93660046136d9565b612381565b6103aa6109ec366004613942565b612397565b3480156109fd57600080fd5b50600e54610471565b348015610a1257600080fd5b506103aa610a213660046131c7565b61240a565b348015610a3257600080fd5b50600a5460ff16610375565b348015610a4a57600080fd5b506103aa610a59366004613245565b612483565b60006301ffc9a760e01b6001600160e01b031983161480610a8f57506380ac58cd60e01b6001600160e01b03198316145b80610aaa5750635b5e139f60e01b6001600160e01b03198316145b92915050565b610ab86124e3565b60108054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527faea1573caf7b4fdd079b947d86c1be6c725642c47582f8f9bd2c7d2a30bf0bd9906020015b60405180910390a150565b606060028054610b24906139d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610b50906139d5565b8015610b9d5780601f10610b7257610100808354040283529160200191610b9d565b820191906000526020600020905b815481529060010190602001808311610b8057829003601f168201915b5050505050905090565b6000610bb28261253d565b610bcf576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000610bf68261131e565b9050336001600160a01b03821614610c2f57610c128133610990565b610c2f576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610c936124e3565b6010805460ff191660011790556040517fc6a6c2b165e62c9d37fc51a18ed76e5be22304bc1d337877c98f31c23e40b0f590610cd190600b90613a0f565b60405180910390a1565b60105460009061010090046001600160a01b0316610d0c576040516353bd4fb360e11b815260040160405180910390fd5b610e04308585601060019054906101000a90046001600160a01b031686610d304690565b610d398b611d56565b604051606097881b6001600160601b0319908116602083015296881b8716603482015260e09590951b6001600160e01b031916604886015292861b909416604c84015260c01b6001600160c01b031916938201939093526068810191909152608881019190915260a8015b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b90505b9392505050565b6000610e1982612564565b9050836001600160a01b0316816001600160a01b031614610e4c5760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b03881690911417610e9957610e7c8633610990565b610e9957604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038516610ec057604051633a954ecd60e21b815260040160405180910390fd5b8015610ecb57600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b84169003610f5d57600184016000818152600460205260408120549003610f5b576000548114610f5b5760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b610faf6124e3565b600a805460ff19168215159081179091556040519081527fe717a2bfc51e250b028aaac5eb448e76f4df26b9609956782bff49097bb792cf90602001610b0a565b610ff86124e3565b600d5481111561101b57604051630590c51360e01b815260040160405180910390fd5b600e8190556040518181527f5307de8ad7d34d5ddfd5171435c143bdc645493980f453eb5d7cdb3e494a1b3590602001610b0a565b6110586124e3565b6040514790600090339083908381818185875af1925050503d806000811461109c576040519150601f19603f3d011682016040523d82523d6000602084013e6110a1565b606091505b50509050806110c357604051631d42c86760e21b815260040160405180910390fd5b6040518281527f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d906020015b60405180910390a15050565b611116838383604051806020016040528060008152506121bc565b505050565b6111236124e3565b60105460ff1615611147576040516306ccad4160e41b815260040160405180910390fd5b600b611154828483613ae0565b507f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa82826040516110ef929190613b9f565b6060816000816001600160401b038111156111a3576111a3613637565b6040519080825280602002602001820160405280156111f557816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816111c15790505b50905060005b8281146112485761122386868381811061121757611217613bce565b90506020020135612200565b82828151811061123557611235613bce565b60209081029190910101526001016111fb565b50949350505050565b6002600954036112a85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026009556011546001600160a01b03166112d657604051637e9f68eb60e11b815260040160405180910390fd5b6011546001600160a01b031633146113015760405163f46fd68360e01b815260040160405180910390fd5b611310878787878787876125cb565b505060016009555050505050565b6000610aaa82612564565b6000805b6012548110156113d7576012818154811061134a5761134a613bce565b60009182526020909120600260039092020101546001600160401b0363010000009091048116908416108015906113ba57506012818154811061138f5761138f613bce565b60009182526020909120600260039092020101546001600160401b03600160581b9091048116908416105b156113c55792915050565b806113cf81613bfa565b91505061132d565b5060405163e82a532960e01b815260040160405180910390fd5b6040516001600160601b0319606084901b16602082015260348101829052600090610e0790605401610da4565b60006001600160a01b038216611447576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6114746124e3565b61147e6000612a36565b565b6114886124e3565b60125487106114aa5760405163e82a532960e01b815260040160405180910390fd5b6001871061153257603c60126114c160018a613c13565b815481106114d1576114d1613bce565b9060005260206000209060030201600201600b9054906101000a90046001600160401b03166115009190613c26565b6001600160401b0316826001600160401b0316101561153257604051636bc1af9360e01b815260040160405180910390fd5b61153c8282612a88565b856012888154811061155057611550613bce565b906000526020600020906003020160000160006101000a8154816001600160501b0302191690836001600160501b03160217905550846012888154811061159957611599613bce565b9060005260206000209060030201600001600a6101000a81548163ffffffff021916908363ffffffff16021790555083601288815481106115dc576115dc613bce565b906000526020600020906003020160010181905550826012888154811061160557611605613bce565b906000526020600020906003020160020160006101000a81548162ffffff021916908362ffffff160217905550816012888154811061164657611646613bce565b906000526020600020906003020160020160036101000a8154816001600160401b0302191690836001600160401b03160217905550806012888154811061168f5761168f613bce565b9060005260206000209060030201600201600b6101000a8154816001600160401b0302191690836001600160401b031602179055507fb3268648542a1bb1b2dd12e3b14aeb5a3ab22c592de96bdd3e842154a5b394fa878787878787876040516116ff9796959493929190613c4d565b60405180910390a150505050505050565b6000610e07338484612abe565b6060600080600061172d8561141e565b90506000816001600160401b0381111561174957611749613637565b604051908082528060200260200182016040528015611772578160200160208202803683370190505b50905061179f60408051608081018252600080825260208201819052918101829052606081019190915290565b60005b838614611819576117b281612c00565b915081604001516118115781516001600160a01b0316156117d257815194505b876001600160a01b0316856001600160a01b031603611811578083878060010198508151811061180457611804613bce565b6020026020010181815250505b6001016117a2565b50909695505050505050565b61182d6124e3565b601254811061184f5760405163e82a532960e01b815260040160405180910390fd5b600c8190556040518181527f160d6de2c069c3adf7f4c1252236d0b325c0e3eb963ddb10c67a81aadf9a305890602001610b0a565b61188c6124e3565b60125460005b818110156119075760128054806118ab576118ab613c9d565b60008281526020812060036000199093019283020180546001600160701b03191681556001810191909155600201805472ffffffffffffffffffffffffffffffffffffff191690559055806118ff81613bfa565b915050611892565b5060005b82811015611d4157600181106119b657603c848461192a600185613c13565b81811061193957611939613bce565b905060c0020160a0016020810190611951919061357a565b61195b9190613c26565b6001600160401b031684848381811061197657611976613bce565b905060c00201608001602081019061198e919061357a565b6001600160401b031610156119b657604051636bc1af9360e01b815260040160405180910390fd5b611a128484838181106119cb576119cb613bce565b905060c0020160800160208101906119e3919061357a565b8585848181106119f5576119f5613bce565b905060c0020160a0016020810190611a0d919061357a565b612a88565b60126040518060c00160405280868685818110611a3157611a31613bce565b611a4792602060c0909202019081019150613cb3565b6001600160501b03168152602001868685818110611a6757611a67613bce565b905060c002016020016020810190611a7f9190613cce565b63ffffffff168152602001868685818110611a9c57611a9c613bce565b905060c00201604001358152602001868685818110611abd57611abd613bce565b905060c002016060016020810190611ad59190613ce9565b62ffffff168152602001868685818110611af157611af1613bce565b905060c002016080016020810190611b09919061357a565b6001600160401b03168152602001868685818110611b2957611b29613bce565b905060c0020160a0016020810190611b41919061357a565b6001600160401b039081169091528254600181810185556000948552602094859020845160039093020180549585015163ffffffff16600160501b026001600160701b03199096166001600160501b0390931692909217949094178155604083015193810193909355606082015160029093018054608084015160a0909401518316600160581b0267ffffffffffffffff60581b19949093166301000000026affffffffffffffffffffff1990911662ffffff9095169490941793909317919091161790557fb3268648542a1bb1b2dd12e3b14aeb5a3ab22c592de96bdd3e842154a5b394fa81858582818110611c3a57611c3a613bce565b611c5092602060c0909202019081019150613cb3565b868685818110611c6257611c62613bce565b905060c002016020016020810190611c7a9190613cce565b878786818110611c8c57611c8c613bce565b905060c0020160400135888887818110611ca857611ca8613bce565b905060c002016060016020810190611cc09190613ce9565b898988818110611cd257611cd2613bce565b905060c002016080016020810190611cea919061357a565b8a8a89818110611cfc57611cfc613bce565b905060c0020160a0016020810190611d14919061357a565b604051611d279796959493929190613c4d565b60405180910390a180611d3981613bfa565b91505061190b565b50505050565b606060038054610b24906139d5565b6001600160a01b038116600090815260056020526040808220546001600160401b03911c16610aaa565b611d886124e3565b601180546001600160a01b0319166001600160a01b0383169081179091556040519081527ff477d93c015f2a73c2ccc5ed37078d12123b80fc5d12e0014c60b913bc1a1ec490602001610b0a565b6060818310611df857604051631960ccad60e11b815260040160405180910390fd5b600080611e0460005490565b905080841115611e12578093505b6000611e1d8761141e565b905084861015611e3c5785850381811015611e36578091505b50611e40565b5060005b6000816001600160401b03811115611e5a57611e5a613637565b604051908082528060200260200182016040528015611e83578160200160208202803683370190505b50905081600003611e99579350610e0792505050565b6000611ea488612200565b905060008160400151611eb5575080515b885b888114158015611ec75750848714155b15611f3c57611ed581612c00565b92508260400151611f345782516001600160a01b031615611ef557825191505b8a6001600160a01b0316826001600160a01b031603611f345780848880600101995081518110611f2757611f27613bce565b6020026020010181815250505b600101611eb7565b505050928352509095945050505050565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152601254600090819084106120305760405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964537461676560a01b604482015260640161129f565b60008481526013602090815260408083203384528252808320548784526014909252909120546012805463ffffffff909316928790811061207357612073613bce565b60009182526020918290206040805160c08101825260039390930290910180546001600160501b0381168452600160501b900463ffffffff169383019390935260018301549082015260029091015462ffffff81166060830152630100000081046001600160401b039081166080840152600160581b9091041660a0820152969195509350915050565b6121056124e3565b600f611116828483613ae0565b61211a6124e3565b8163ffffffff16600d54816121326001546000540390565b61213c9190613d04565b111561215b5760405163800113cb60e01b815260040160405180910390fd5b611116828463ffffffff16612c3c565b6010546121919061010090046001600160a01b031661218b868686610cdb565b83612abe565b611d415760405162b7fad960e11b815260040160405180910390fd5b6060600f8054610b24906139d5565b6121c7848484610e0e565b6001600160a01b0383163b15611d41576121e384848484612c56565b611d41576040516368d2bf6b60e11b815260040160405180910390fd5b60408051608080820183526000808352602080840182905283850182905260608085018390528551938401865282845290830182905293820181905292810183905290915060005483106122545792915050565b61225d83612c00565b905080604001511561226f5792915050565b610e0783612d41565b60606122838261253d565b6122a057604051630a14c4b560e41b815260040160405180910390fd5b6000600b80546122af906139d5565b80601f01602080910402602001604051908101604052809291908181526020018280546122db906139d5565b80156123285780601f106122fd57610100808354040283529160200191612328565b820191906000526020600020905b81548152906001019060200180831161230b57829003601f168201915b50505050509050805160000361234d5760405180602001604052806000815250610e07565b8061235784612d76565b600f60405160200161236b93929190613d17565b6040516020818303038152906040529392505050565b6000610e073361239133866113f1565b84612abe565b6002600954036123e95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161129f565b60026009556123fd863387878787876125cb565b5050600160095550505050565b6124126124e3565b6001600160a01b0381166124775760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161129f565b61248081612a36565b50565b61248b6124e3565b600d548111156124ae5760405163430b83b160e11b815260040160405180910390fd5b600d8190556040518181527fc7bbc2b288fc13314546ea4aa51f6bcf71b7ba4740beeb3d32e9acef57b6668a90602001610b0a565b6008546001600160a01b0316331461147e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161129f565b6000805482108015610aaa575050600090815260046020526040902054600160e01b161590565b6000816000548110156125b25760008181526004602052604081205490600160e01b821690036125b0575b80600003610e0757506000190160008181526004602052604090205461258f565b505b604051636f96cda160e11b815260040160405180910390fd5b600a5460ff166125ee57604051630952c8a960e11b815260040160405180910390fd5b8663ffffffff16600d54816126066001546000540390565b6126109190613d04565b111561262f5760405163800113cb60e01b815260040160405180910390fd5b600c5460125481106126545760405163e82a532960e01b815260040160405180910390fd5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260105461010090046001600160a01b0316156126f3576126de338b8888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061216b92505050565b6126e786612dba565b6126f086611329565b91505b6012828154811061270657612706613bce565b60009182526020918290206040805160c081018252600390930290910180546001600160501b03811680855263ffffffff600160501b9092048216958501959095526001820154928401929092526002015462ffffff811660608401526001600160401b036301000000820481166080850152600160581b9091041660a083015290925061279791908c1690613db7565b6001600160501b03163410156127c057604051630717c22560e51b815260040160405180910390fd5b606081015162ffffff161561281a57606081015160008381526014602052604090205462ffffff909116906127fc9063ffffffff8d1690613d04565b111561281a5760405162d0844960e21b815260040160405180910390fd5b600e541561288157600e548a63ffffffff166128588b6001600160a01b03166000908152600560205260409081902054901c6001600160401b031690565b6128629190613d04565b11156128815760405163751304ed60e11b815260040160405180910390fd5b602081015163ffffffff16156128f35760208082015160008481526013835260408082206001600160a01b038e168352909352919091205463ffffffff918216916128ce918d9116613de2565b63ffffffff1611156128f35760405163b4f3729b60e01b815260040160405180910390fd5b6040810151156129955780604001516129778989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060405161295c92508e915060200160609190911b6001600160601b031916815260140190565b60405160208183030381529060405280519060200120612e18565b14612995576040516309bde33960e01b815260040160405180910390fd5b60008281526013602090815260408083206001600160a01b038d168452909152812080548c92906129cd90849063ffffffff16613de2565b92506101000a81548163ffffffff021916908363ffffffff1602179055508963ffffffff16601460008481526020019081526020016000206000828254612a149190613d04565b90915550612a2a90508963ffffffff8c16612c3c565b50505050505050505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b806001600160401b0316826001600160401b031610612aba57604051631750215560e11b815260040160405180910390fd5b5050565b6000806000612acd8585612e65565b90925090506000816004811115612ae657612ae6613dff565b148015612b045750856001600160a01b0316826001600160a01b0316145b15612b1457600192505050610e07565b600080876001600160a01b0316631626ba7e60e01b8888604051602401612b3c929190613e15565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612b7a9190613e2e565b600060405180830381855afa9150503d8060008114612bb5576040519150601f19603f3d011682016040523d82523d6000602084013e612bba565b606091505b5091509150818015612bcd575080516020145b8015612bf457508051630b135d3f60e11b90612bf29083016020908101908401613e4a565b145b98975050505050505050565b604080516080810182526000808252602082018190529181018290526060810191909152600082815260046020526040902054610aaa90612eaa565b612aba828260405180602001604052806000815250612ef1565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290612c8b903390899088908890600401613e63565b6020604051808303816000875af1925050508015612cc6575060408051601f3d908101601f19168201909252612cc391810190613ea0565b60015b612d24573d808015612cf4576040519150601f19603f3d011682016040523d82523d6000602084013e612cf9565b606091505b508051600003612d1c576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b604080516080810182526000808252602082018190529181018290526060810191909152610aaa612d7183612564565b612eaa565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a900480612d905750819003601f19909101908152919050565b6011546000906001600160a01b03163314612dd657603c612dda565b61012c5b9050612def6001600160401b03821642613c13565b826001600160401b03161015612aba576040516313634e8d60e11b815260040160405180910390fd5b600081815b8451811015612e5d57612e4982868381518110612e3c57612e3c613bce565b6020026020010151612f5e565b915080612e5581613bfa565b915050612e1d565b509392505050565b6000808251604103612e9b5760208301516040840151606085015160001a612e8f87828585612f8d565b94509450505050612ea3565b506000905060025b9250929050565b604080516080810182526001600160a01b038316815260a083901c6001600160401b03166020820152600160e01b831615159181019190915260e89190911c606082015290565b612efb838361307a565b6001600160a01b0383163b15611116576000548281035b612f256000868380600101945086612c56565b612f42576040516368d2bf6b60e11b815260040160405180910390fd5b818110612f12578160005414612f5757600080fd5b5050505050565b6000818310612f7a576000828152602084905260409020610e07565b6000838152602083905260409020610e07565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612fc45750600090506003613071565b8460ff16601b14158015612fdc57508460ff16601c14155b15612fed5750600090506004613071565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015613041573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661306a57600060019250925050613071565b9150600090505b94509492505050565b600080549082900361309f5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b81811461314e57808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600101613116565b508160000361316f57604051622e076360e81b815260040160405180910390fd5b60005550505050565b6001600160e01b03198116811461248057600080fd5b6000602082840312156131a057600080fd5b8135610e0781613178565b80356001600160a01b03811681146131c257600080fd5b919050565b6000602082840312156131d957600080fd5b610e07826131ab565b60005b838110156131fd5781810151838201526020016131e5565b50506000910152565b6000815180845261321e8160208601602086016131e2565b601f01601f19169290920160200192915050565b602081526000610e076020830184613206565b60006020828403121561325757600080fd5b5035919050565b6000806040838503121561327157600080fd5b61327a836131ab565b946020939093013593505050565b803563ffffffff811681146131c257600080fd5b80356001600160401b03811681146131c257600080fd5b6000806000606084860312156132c857600080fd5b6132d1846131ab565b92506132df60208501613288565b91506132ed6040850161329c565b90509250925092565b60008060006060848603121561330b57600080fd5b613314846131ab565b9250613322602085016131ab565b9150604084013590509250925092565b803580151581146131c257600080fd5b60006020828403121561335457600080fd5b610e0782613332565b60008083601f84011261336f57600080fd5b5081356001600160401b0381111561338657600080fd5b602083019150836020828501011115612ea357600080fd5b600080602083850312156133b157600080fd5b82356001600160401b038111156133c757600080fd5b6133d38582860161335d565b90969095509350505050565b60008083601f8401126133f157600080fd5b5081356001600160401b0381111561340857600080fd5b6020830191508360208260051b8501011115612ea357600080fd5b6000806020838503121561343657600080fd5b82356001600160401b0381111561344c57600080fd5b6133d3858286016133df565b80516001600160a01b031682526020808201516001600160401b03169083015260408082015115159083015260609081015162ffffff16910152565b6020808252825182820181905260009190848201906040850190845b81811015611819576134c3838551613458565b92840192608092909201916001016134b0565b600080600080600080600060a0888a0312156134f157600080fd5b6134fa88613288565b9650613508602089016131ab565b955060408801356001600160401b038082111561352457600080fd5b6135308b838c016133df565b909750955085915061354460608b0161329c565b945060808a013591508082111561355a57600080fd5b506135678a828b0161335d565b989b979a50959850939692959293505050565b60006020828403121561358c57600080fd5b610e078261329c565b80356001600160501b03811681146131c257600080fd5b803562ffffff811681146131c257600080fd5b600080600080600080600060e0888a0312156135da57600080fd5b873596506135ea60208901613595565b95506135f860408901613288565b94506060880135935061360d608089016135ac565b925061361b60a0890161329c565b915061362960c0890161329c565b905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261365e57600080fd5b81356001600160401b038082111561367857613678613637565b604051601f8301601f19908116603f011681019082821181831017156136a0576136a0613637565b816040528381528660208588010111156136b957600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156136ec57600080fd5b8235915060208301356001600160401b0381111561370957600080fd5b6137158582860161364d565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156118195783518352928401929184019160010161373b565b6000806020838503121561376a57600080fd5b82356001600160401b038082111561378157600080fd5b818501915085601f83011261379557600080fd5b8135818111156137a457600080fd5b86602060c0830285010111156137b957600080fd5b60209290920196919550909350505050565b6000806000606084860312156137e057600080fd5b6137e9846131ab565b95602085013595506040909401359392505050565b6000806040838503121561381157600080fd5b61381a836131ab565b915061382860208401613332565b90509250929050565b6000806040838503121561384457600080fd5b61384d83613288565b9150613828602084016131ab565b6000806000806080858703121561387157600080fd5b61387a856131ab565b935061388860208601613288565b92506138966040860161329c565b915060608501356001600160401b038111156138b157600080fd5b6138bd8782880161364d565b91505092959194509250565b600080600080608085870312156138df57600080fd5b6138e8856131ab565b93506138f6602086016131ab565b92506040850135915060608501356001600160401b038111156138b157600080fd5b60808101610aaa8284613458565b6000806040838503121561393957600080fd5b61384d836131ab565b6000806000806000806080878903121561395b57600080fd5b61396487613288565b955060208701356001600160401b038082111561398057600080fd5b61398c8a838b016133df565b90975095508591506139a060408a0161329c565b945060608901359150808211156139b657600080fd5b506139c389828a0161335d565b979a9699509497509295939492505050565b600181811c908216806139e957607f821691505b602082108103613a0957634e487b7160e01b600052602260045260246000fd5b50919050565b6000602080835260008454613a23816139d5565b80848701526040600180841660008114613a445760018114613a5e57613a8c565b60ff1985168984015283151560051b890183019550613a8c565b896000528660002060005b85811015613a845781548b8201860152908301908801613a69565b8a0184019650505b509398975050505050505050565b601f82111561111657600081815260208120601f850160051c81016020861015613ac15750805b601f850160051c820191505b81811015610f9f57828155600101613acd565b6001600160401b03831115613af757613af7613637565b613b0b83613b0583546139d5565b83613a9a565b6000601f841160018114613b3f5760008515613b275750838201355b600019600387901b1c1916600186901b178355612f57565b600083815260209020601f19861690835b82811015613b705786850135825560209485019460019092019101613b50565b5086821015613b8d5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613c0c57613c0c613be4565b5060010190565b81810381811115610aaa57610aaa613be4565b6001600160401b03818116838216019080821115613c4657613c46613be4565b5092915050565b9687526001600160501b0395909516602087015263ffffffff939093166040860152606085019190915262ffffff1660808401526001600160401b0390811660a08401521660c082015260e00190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215613cc557600080fd5b610e0782613595565b600060208284031215613ce057600080fd5b610e0782613288565b600060208284031215613cfb57600080fd5b610e07826135ac565b80820180821115610aaa57610aaa613be4565b600084516020613d2a8285838a016131e2565b855191840191613d3d8184848a016131e2565b8554920191600090613d4e816139d5565b60018281168015613d665760018114613d7b57613da7565b60ff1984168752821515830287019450613da7565b896000528560002060005b84811015613d9f57815489820152908301908701613d86565b505082870194505b50929a9950505050505050505050565b6001600160501b03818116838216028082169190828114613dda57613dda613be4565b505092915050565b63ffffffff818116838216019080821115613c4657613c46613be4565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000610e046040830184613206565b60008251613e408184602087016131e2565b9190910192915050565b600060208284031215613e5c57600080fd5b5051919050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613e9690830184613206565b9695505050505050565b600060208284031215613eb257600080fd5b8151610e078161317856fea2646970667358221220798db08bb94687017f771fa49e152da7ee0ebe4cf2b9e1965cffb1b653620b6c64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "explicitOwnershipOf(uint256)": {
        "details": "Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`"
      },
      "explicitOwnershipsOf(uint256[])": {
        "details": "Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokensOfOwner(address)": {
        "details": "Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine)."
      },
      "tokensOfOwnerIn(address,uint256,uint256)": {
        "details": "Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`"
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "InvalidQueryRange()": [
        {
          "notice": "Invalid query range (`start` >= `stop`)."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3222,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3224,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3226,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3228,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3232,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3236,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3241,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)3154_storage)"
      },
      {
        "astId": 3247,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 137,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1710,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_mintable",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 1712,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_currentBaseURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 1714,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_activeStage",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1716,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_maxMintableSupply",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1718,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_globalWalletLimit",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1720,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_tokenURISuffix",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 1722,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_baseURIPermanent",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 1724,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_cosigner",
        "offset": 1,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 1726,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_crossmintAddress",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 1730,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_mintStages",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_struct(MintStageInfo)3000_storage)dyn_storage"
      },
      {
        "astId": 1736,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_stageMintedCountsPerWallet",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint32))"
      },
      {
        "astId": 1740,
        "contract": "contracts/ERC721I.sol:ERC721I",
        "label": "_stageMintedCounts",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MintStageInfo)3000_storage)dyn_storage": {
        "base": "t_struct(MintStageInfo)3000_storage",
        "encoding": "dynamic_array",
        "label": "struct IERC721I.MintStageInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint32))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint32)"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)3154_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)3154_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MintStageInfo)3000_storage": {
        "encoding": "inplace",
        "label": "struct IERC721I.MintStageInfo",
        "members": [
          {
            "astId": 2989,
            "contract": "contracts/ERC721I.sol:ERC721I",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint80"
          },
          {
            "astId": 2991,
            "contract": "contracts/ERC721I.sol:ERC721I",
            "label": "walletLimit",
            "offset": 10,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2993,
            "contract": "contracts/ERC721I.sol:ERC721I",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 2995,
            "contract": "contracts/ERC721I.sol:ERC721I",
            "label": "maxStageSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 2997,
            "contract": "contracts/ERC721I.sol:ERC721I",
            "label": "startTimeUnixSeconds",
            "offset": 3,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 2999,
            "contract": "contracts/ERC721I.sol:ERC721I",
            "label": "endTimeUnixSeconds",
            "offset": 11,
            "slot": "2",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TokenApprovalRef)3154_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 3153,
            "contract": "contracts/ERC721I.sol:ERC721I",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}