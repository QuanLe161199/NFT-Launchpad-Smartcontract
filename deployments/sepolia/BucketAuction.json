{
  "address": "0x56412040BD2346D37414b27e28da0311A256d15A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "collectionName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "collectionSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURISuffix",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxMintableSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "globalWalletLimit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "cosigner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minimumContributionInWei",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "startTimeUnixSeconds",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTimeUnixSeconds",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadySentTokensToUser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BucketAuctionActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BucketAuctionNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotIncreaseMaxMintableSupply",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotSendMoreThanUserPurchased",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotSetPriceIfClaimable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotSetPriceIfFirstTokenSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotUpdatePermanentBaseURI",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CosignerNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CrossmintAddressNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CrossmintOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GlobalWalletLimitOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientStageTimeGap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCosignSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidQueryRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStageArgsLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStartAndEndTimestamp",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LowerThanMinBidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoSupplyLeft",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotClaimable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMintable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceHasBeenSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StageSupplyExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TimestampExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserAlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WalletGlobalLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WalletStageLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidderTotal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bucketTotal",
          "type": "uint256"
        }
      ],
      "name": "Bid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "PermanentBaseURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activeStage",
          "type": "uint256"
        }
      ],
      "name": "SetActiveStage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "SetBaseURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "claimable",
          "type": "bool"
        }
      ],
      "name": "SetClaimable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "cosigner",
          "type": "address"
        }
      ],
      "name": "SetCosigner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "crossmintAddress",
          "type": "address"
        }
      ],
      "name": "SetCrossmintAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "globalWalletLimit",
          "type": "uint256"
        }
      ],
      "name": "SetGlobalWalletLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxMintableSupply",
          "type": "uint256"
        }
      ],
      "name": "SetMaxMintableSupply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumContributionInWei",
          "type": "uint256"
        }
      ],
      "name": "SetMinimumContribution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "mintable",
          "type": "bool"
        }
      ],
      "name": "SetMintable",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SetPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint80",
          "name": "price",
          "type": "uint80"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "walletLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "maxStageSupply",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "startTimeUnixSeconds",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "endTimeUnixSeconds",
          "type": "uint64"
        }
      ],
      "name": "UpdateStage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CROSSMINT_TIMESTAMP_EXPIRY_SECONDS",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_STAGE_INTERVAL_SECONDS",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "amountPurchased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "assertValidCosign",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTokensAndRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "crossmint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "explicitOwnershipOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "explicitOwnershipsOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "startTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "burned",
              "type": "bool"
            },
            {
              "internalType": "uint24",
              "name": "extraData",
              "type": "uint24"
            }
          ],
          "internalType": "struct IERC721A.TokenOwnership[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "getActiveStageFromTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClaimable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "getCosignDigest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "getCosignNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCosigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCrossmintAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEndTimeUnixSeconds",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalWalletLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxMintableSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinimumContributionInWei",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMintable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberStages",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStageInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint80",
              "name": "price",
              "type": "uint80"
            },
            {
              "internalType": "uint32",
              "name": "walletLimit",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint24",
              "name": "maxStageSupply",
              "type": "uint24"
            },
            {
              "internalType": "uint64",
              "name": "startTimeUnixSeconds",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTimeUnixSeconds",
              "type": "uint64"
            }
          ],
          "internalType": "struct IERC721I.MintStageInfo",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStartTimeUnixSeconds",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenURISuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalUsers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint216",
              "name": "contribution",
              "type": "uint216"
            },
            {
              "internalType": "uint32",
              "name": "tokensClaimed",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "refundClaimed",
              "type": "bool"
            }
          ],
          "internalType": "struct IBucketAuction.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getUserDataPage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint216",
              "name": "contribution",
              "type": "uint216"
            },
            {
              "internalType": "uint32",
              "name": "tokensClaimed",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "refundClaimed",
              "type": "bool"
            }
          ],
          "internalType": "struct IBucketAuction.User[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "qty",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ownerMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "refundAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "sendAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "sendRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "sendRefundBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sendTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "sendTokensAndRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "sendTokensAndRefundBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "sendTokensBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "activeStage",
          "type": "uint256"
        }
      ],
      "name": "setActiveStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setBaseURIPermanent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "claimable",
          "type": "bool"
        }
      ],
      "name": "setClaimable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cosigner",
          "type": "address"
        }
      ],
      "name": "setCosigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "crossmintAddress",
          "type": "address"
        }
      ],
      "name": "setCrossmintAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "globalWalletLimit",
          "type": "uint256"
        }
      ],
      "name": "setGlobalWalletLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxMintableSupply",
          "type": "uint256"
        }
      ],
      "name": "setMaxMintableSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumContributionInWei",
          "type": "uint256"
        }
      ],
      "name": "setMinimumContribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "mintable",
          "type": "bool"
        }
      ],
      "name": "setMintable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "priceInWei",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint80",
              "name": "price",
              "type": "uint80"
            },
            {
              "internalType": "uint32",
              "name": "walletLimit",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint24",
              "name": "maxStageSupply",
              "type": "uint24"
            },
            {
              "internalType": "uint64",
              "name": "startTimeUnixSeconds",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "endTimeUnixSeconds",
              "type": "uint64"
            }
          ],
          "internalType": "struct IERC721I.MintStageInfo[]",
          "name": "newStages",
          "type": "tuple[]"
        }
      ],
      "name": "setStages",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "startTime",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTime",
          "type": "uint64"
        }
      ],
      "name": "setStartAndEndTimeUnixSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "suffix",
          "type": "string"
        }
      ],
      "name": "setTokenURISuffix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stop",
          "type": "uint256"
        }
      ],
      "name": "tokensOfOwnerIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "totalMintedByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "price",
          "type": "uint80"
        },
        {
          "internalType": "uint32",
          "name": "walletLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint24",
          "name": "maxStageSupply",
          "type": "uint24"
        },
        {
          "internalType": "uint64",
          "name": "startTimeUnixSeconds",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "endTimeUnixSeconds",
          "type": "uint64"
        }
      ],
      "name": "updateStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x06174881c80bf4ce923fc169d96b5ddf3848e55f14e780e85c7d10975b0376c8",
  "receipt": {
    "to": null,
    "from": "0xfDfc8F8122Aa7aBBbdC6c5343E649b98809DEc19",
    "contractAddress": "0x56412040BD2346D37414b27e28da0311A256d15A",
    "transactionIndex": 0,
    "gasUsed": "4707613",
    "logsBloom": "0x
    "blockHash": "0xdc681a4736afb777b92cdad485f453e29280e16504fe73188f60b26e04258632",
    "transactionHash": "0x06174881c80bf4ce923fc169d96b5ddf3848e55f14e780e85c7d10975b0376c8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2614929,
        "transactionHash": "0x06174881c80bf4ce923fc169d96b5ddf3848e55f14e780e85c7d10975b0376c8",
        "address": "0x56412040BD2346D37414b27e28da0311A256d15A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fdfc8f8122aa7abbbdc6c5343e649b98809dec19"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdc681a4736afb777b92cdad485f453e29280e16504fe73188f60b26e04258632"
      }
    ],
    "blockNumber": 2614929,
    "cumulativeGasUsed": "4707613",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Azuki",
    "AZUKI",
    ".json",
    "10000",
    "5",
    "0x0000000000000000000000000000000000000000",
    "40000000000000000",
    "1672802400",
    "1840082640"
  ],
  "numDeployments": 2,
  "solcInputHash": "656187ff28615d8bdf54e22d41f8f15a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collectionSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURISuffix\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxMintableSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalWalletLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cosigner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumContributionInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"startTimeUnixSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTimeUnixSeconds\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadySentTokensToUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BucketAuctionActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BucketAuctionNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotIncreaseMaxMintableSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSendMoreThanUserPurchased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetPriceIfClaimable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetPriceIfFirstTokenSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotUpdatePermanentBaseURI\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CosignerNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CrossmintAddressNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CrossmintOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GlobalWalletLimitOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientStageTimeGap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCosignSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStageArgsLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStartAndEndTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LowerThanMinBidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoSupplyLeft\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotClaimable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMintable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceHasBeenSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StageSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimestampExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletGlobalLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletStageLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidderTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bucketTotal\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"PermanentBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeStage\",\"type\":\"uint256\"}],\"name\":\"SetActiveStage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"SetBaseURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"claimable\",\"type\":\"bool\"}],\"name\":\"SetClaimable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cosigner\",\"type\":\"address\"}],\"name\":\"SetCosigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"crossmintAddress\",\"type\":\"address\"}],\"name\":\"SetCrossmintAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"globalWalletLimit\",\"type\":\"uint256\"}],\"name\":\"SetGlobalWalletLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMintableSupply\",\"type\":\"uint256\"}],\"name\":\"SetMaxMintableSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumContributionInWei\",\"type\":\"uint256\"}],\"name\":\"SetMinimumContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"}],\"name\":\"SetMintable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"price\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"walletLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"maxStageSupply\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startTimeUnixSeconds\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endTimeUnixSeconds\",\"type\":\"uint64\"}],\"name\":\"UpdateStage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CROSSMINT_TIMESTAMP_EXPIRY_SECONDS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAGE_INTERVAL_SECONDS\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"amountPurchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"qty\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"assertValidCosign\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokensAndRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"qty\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"crossmint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"extraData\",\"type\":\"uint24\"}],\"internalType\":\"struct IERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"getActiveStageFromTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"qty\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"getCosignDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"getCosignNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCosigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCrossmintAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndTimeUnixSeconds\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxMintableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumContributionInWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberStages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStageInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint80\",\"name\":\"price\",\"type\":\"uint80\"},{\"internalType\":\"uint32\",\"name\":\"walletLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"maxStageSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"startTimeUnixSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTimeUnixSeconds\",\"type\":\"uint64\"}],\"internalType\":\"struct IERC721I.MintStageInfo\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartTimeUnixSeconds\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenURISuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint216\",\"name\":\"contribution\",\"type\":\"uint216\"},{\"internalType\":\"uint32\",\"name\":\"tokensClaimed\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"refundClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct IBucketAuction.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getUserDataPage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint216\",\"name\":\"contribution\",\"type\":\"uint216\"},{\"internalType\":\"uint32\",\"name\":\"tokensClaimed\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"refundClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct IBucketAuction.User[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"qty\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"qty\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"refundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"sendRefundBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendTokensAndRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"sendTokensAndRefundBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"sendTokensBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"activeStage\",\"type\":\"uint256\"}],\"name\":\"setActiveStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBaseURIPermanent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claimable\",\"type\":\"bool\"}],\"name\":\"setClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cosigner\",\"type\":\"address\"}],\"name\":\"setCosigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crossmintAddress\",\"type\":\"address\"}],\"name\":\"setCrossmintAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"globalWalletLimit\",\"type\":\"uint256\"}],\"name\":\"setGlobalWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMintableSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxMintableSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumContributionInWei\",\"type\":\"uint256\"}],\"name\":\"setMinimumContribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"}],\"name\":\"setMintable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint80\",\"name\":\"price\",\"type\":\"uint80\"},{\"internalType\":\"uint32\",\"name\":\"walletLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"maxStageSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"startTimeUnixSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTimeUnixSeconds\",\"type\":\"uint64\"}],\"internalType\":\"struct IERC721I.MintStageInfo[]\",\"name\":\"newStages\",\"type\":\"tuple[]\"}],\"name\":\"setStages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"}],\"name\":\"setStartAndEndTimeUnixSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"suffix\",\"type\":\"string\"}],\"name\":\"setTokenURISuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"totalMintedByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"price\",\"type\":\"uint80\"},{\"internalType\":\"uint32\",\"name\":\"walletLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint24\",\"name\":\"maxStageSupply\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"startTimeUnixSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTimeUnixSeconds\",\"type\":\"uint64\"}],\"name\":\"updateStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"amountPurchased(address)\":{\"params\":{\"user\":\"user's address to query.\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"explicitOwnershipOf(uint256)\":{\"details\":\"Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`\"},\"explicitOwnershipsOf(uint256[])\":{\"details\":\"Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"refundAmount(address)\":{\"params\":{\"user\":\"user's address to query.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"sendAllTokens(address)\":{\"details\":\"if some tokens have already been sent, the remainder must be sent   using sendTokens().\",\"params\":{\"to\":\"address to send tokens to.\"}},\"sendRefund(address)\":{\"details\":\"can only be called after the clearing price has been set.\",\"params\":{\"to\":\"the address to refund.\"}},\"sendRefundBatch(address[])\":{\"params\":{\"addresses\":\"array of addresses to refund.\"}},\"sendTokens(address,uint256)\":{\"details\":\"purchased amount for an address can be sent in multiple calls.   Can only be called after clearing price has been set.\",\"params\":{\"amount\":\"number of tokens to send.\",\"to\":\"address to send tokens to.\"}},\"sendTokensAndRefund(address)\":{\"details\":\"can only be called after the clearing price has been set.\",\"params\":{\"to\":\"the address to refund.\"}},\"sendTokensAndRefundBatch(address[])\":{\"params\":{\"addresses\":\"array of addresses to send tokens to.\"}},\"sendTokensBatch(address[])\":{\"params\":{\"addresses\":\"array of addresses to send tokens to.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"setMinimumContribution(uint256)\":{\"details\":\"set this price in wei, not eth!\",\"params\":{\"minimumContributionInWei\":\"new price, set in wei\"}},\"setPrice(uint256)\":{\"details\":\"set this price in wei, not eth!\",\"params\":{\"priceInWei\":\"new price, set in wei\"}},\"setStartAndEndTimeUnixSeconds(uint64,uint64)\":{\"details\":\"cannot be reactivated after price has been set.\",\"params\":{\"endTime\":\"set to unix timestamp for the auction end time.\",\"startTime\":\"set to unix timestamp for the auction start time.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokensOfOwner(address)\":{\"details\":\"Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine).\"},\"tokensOfOwnerIn(address,uint256,uint256)\":{\"details\":\"Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`\"},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"InvalidQueryRange()\":[{\"notice\":\"Invalid query range (`start` >= `stop`).\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{\"amountPurchased(address)\":{\"notice\":\"get the number of tokens purchased by an address, after the   clearing price has been set.\"},\"bid()\":{\"notice\":\"place a bid in ETH or add to your existing bid. Calling this   multiple times will increase your bid amount. All bids placed are final   and cannot be reversed.\"},\"refundAmount(address)\":{\"notice\":\"get the refund amount for an account, after the clearing price   has been set.\"},\"sendAllTokens(address)\":{\"notice\":\"send all of an address's purchased tokens.\"},\"sendRefund(address)\":{\"notice\":\"send refund to an address. Refunds are unsuccessful bids or   an address's remaining eth after all their tokens have been paid for.\"},\"sendRefundBatch(address[])\":{\"notice\":\"send refunds to a batch of addresses.\"},\"sendTokens(address,uint256)\":{\"notice\":\"mint tokens to an address.\"},\"sendTokensAndRefund(address)\":{\"notice\":\"send refunds and tokens to an address.\"},\"sendTokensAndRefundBatch(address[])\":{\"notice\":\"send refunds and tokens to a batch of addresses.\"},\"sendTokensBatch(address[])\":{\"notice\":\"send tokens to a batch of addresses.\"},\"setMinimumContribution(uint256)\":{\"notice\":\"set the minimum contribution required to place a bid\"},\"setPrice(uint256)\":{\"notice\":\"set the clearing price after all bids have been placed.\"},\"setStartAndEndTimeUnixSeconds(uint64,uint64)\":{\"notice\":\"set the start and end times in unix seconds for the bucket auction.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BucketAuction.sol\":\"BucketAuction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be proved to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and the sibling nodes in `proof`,\\n     * consuming from one or the other at each step according to the instructions given by\\n     * `proofFlags`.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x596ed72a251d391b814a4aa19d7acb02ebdcc92ba27d3fff74a6f0c158b12ab7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.1) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length == 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/BucketAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\n\\nimport \\\"./interfaces/IBucketAuction.sol\\\";\\nimport \\\"./ERC721I.sol\\\";\\n\\ncontract BucketAuction is IBucketAuction, ERC721I {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bool private _claimable;\\n    bool private _firstTokenSent;\\n    uint64 private _startTimeUnixSeconds;\\n    uint64 private _endTimeUnixSeconds;\\n    uint256 private _minimumContributionInWei;\\n    uint256 private _price;\\n    mapping(address => User) private _userData;\\n    EnumerableSet.AddressSet private _users;\\n\\n    constructor(\\n        string memory collectionName,\\n        string memory collectionSymbol,\\n        string memory tokenURISuffix,\\n        uint256 maxMintableSupply,\\n        uint256 globalWalletLimit,\\n        address cosigner,\\n        uint256 minimumContributionInWei,\\n        uint64 startTimeUnixSeconds,\\n        uint64 endTimeUnixSeconds\\n    )\\n        ERC721I(\\n            collectionName,\\n            collectionSymbol,\\n            tokenURISuffix,\\n            maxMintableSupply,\\n            globalWalletLimit,\\n            cosigner\\n        )\\n    {\\n        _claimable = false;\\n        _minimumContributionInWei = minimumContributionInWei;\\n        _startTimeUnixSeconds = startTimeUnixSeconds;\\n        _endTimeUnixSeconds = endTimeUnixSeconds;\\n        _firstTokenSent = false;\\n    }\\n\\n    modifier isClaimable() {\\n        if (!_claimable) revert NotClaimable();\\n        _;\\n    }\\n\\n    modifier isAuctionActive() {\\n        if (_startTimeUnixSeconds > block.timestamp || _endTimeUnixSeconds <= block.timestamp)\\n            revert BucketAuctionNotActive();\\n        _;\\n    }\\n\\n    modifier isAuctionInactive() {\\n        if (_startTimeUnixSeconds <= block.timestamp && block.timestamp < _endTimeUnixSeconds)\\n            revert BucketAuctionActive();\\n        _;\\n    }\\n\\n    function getMinimumContributionInWei() external view returns (uint256) {\\n        return _minimumContributionInWei;\\n    }\\n\\n    function getPrice() external view returns (uint256) {\\n        return _price;\\n    }\\n\\n    function getStartTimeUnixSeconds() external view returns (uint64) {\\n        return _startTimeUnixSeconds;\\n    }\\n\\n    function getEndTimeUnixSeconds() external view returns (uint64) {\\n        return _endTimeUnixSeconds;\\n    }\\n\\n    function getAuctionActive() external view returns (bool) {\\n        return _startTimeUnixSeconds <= block.timestamp && block.timestamp < _endTimeUnixSeconds;\\n    }\\n\\n    function getUserData(address user) external view returns (User memory) {\\n        return _userData[user];\\n    }\\n\\n    function getUserDataPage(uint256 limit, uint256 offset)\\n        external\\n        view\\n        returns (\\n            User[] memory,\\n            address[] memory,\\n            uint256 total\\n        )\\n    {\\n        uint256 numUsers = _users.length();\\n        uint256 pageSize = limit;\\n        if (pageSize > numUsers - offset) {\\n            pageSize = numUsers - offset;\\n        }\\n\\n        User[] memory userData = new User[](pageSize);\\n        address[] memory userAddresses = new address[](pageSize);\\n\\n        for (uint256 i = 0; i < pageSize; i++) {\\n            address user = _users.at(i + offset);\\n            userData[i] = _userData[user];\\n            userAddresses[i] = user;\\n        }\\n\\n        return (userData, userAddresses, numUsers);\\n    }\\n\\n    function getTotalUsers() external view returns (uint256) {\\n        return _users.length();\\n    }\\n\\n    function getClaimable() external view returns (bool) {\\n        return _claimable;\\n    }\\n\\n    function setClaimable(bool claimable) external onlyOwner {\\n        _claimable = claimable;\\n        emit SetClaimable(claimable);\\n    }\\n\\n    /**\\n     * @notice set the start and end times in unix seconds for the bucket auction.\\n     * @dev cannot be reactivated after price has been set.\\n     * @param startTime set to unix timestamp for the auction start time.\\n     * @param endTime set to unix timestamp for the auction end time.\\n     */\\n    function setStartAndEndTimeUnixSeconds(uint64 startTime, uint64 endTime) external onlyOwner {\\n        if (_price != 0) revert PriceHasBeenSet();\\n        if (endTime <= startTime) revert InvalidStartAndEndTimestamp();\\n\\n        _startTimeUnixSeconds = startTime;\\n        _endTimeUnixSeconds = endTime;\\n    }\\n\\n    /**\\n     * @notice place a bid in ETH or add to your existing bid. Calling this\\n     *   multiple times will increase your bid amount. All bids placed are final\\n     *   and cannot be reversed.\\n     */\\n    function bid() external payable isAuctionActive nonReentrant {\\n        User storage bidder = _userData[msg.sender]; // get user's current bid total\\n        uint256 contribution_ = bidder.contribution; // bidder.contribution is uint216\\n        unchecked {\\n            // does not overflow\\n            contribution_ += msg.value;\\n        }\\n        if (contribution_ < _minimumContributionInWei) revert LowerThanMinBidAmount();\\n        bidder.contribution = uint216(contribution_);\\n\\n        _users.add(msg.sender);\\n\\n        emit Bid(msg.sender, msg.value, contribution_, address(this).balance);\\n    }\\n\\n    /**\\n     * @notice set the minimum contribution required to place a bid\\n     * @dev set this price in wei, not eth!\\n     * @param minimumContributionInWei new price, set in wei\\n     */\\n    function setMinimumContribution(uint256 minimumContributionInWei) external onlyOwner {\\n        _minimumContributionInWei = minimumContributionInWei;\\n        emit SetMinimumContribution(minimumContributionInWei);\\n    }\\n\\n    /**\\n     * @notice set the clearing price after all bids have been placed.\\n     * @dev set this price in wei, not eth!\\n     * @param priceInWei new price, set in wei\\n     */\\n    function setPrice(uint256 priceInWei) external onlyOwner {\\n        if (_claimable) revert CannotSetPriceIfClaimable();\\n        if (block.timestamp <= _endTimeUnixSeconds) revert BucketAuctionActive();\\n        if (_firstTokenSent) revert CannotSetPriceIfFirstTokenSent();\\n\\n        _price = priceInWei;\\n        emit SetPrice(priceInWei);\\n    }\\n\\n    /**\\n     * @dev handles all minting.\\n     * @param to address to mint tokens to.\\n     * @param amount number of tokens to mint.\\n     */\\n    function _internalMint(address to, uint256 amount) internal hasSupply(amount) {\\n        _safeMint(to, amount);\\n        if (!_firstTokenSent && amount > 0) _firstTokenSent = true;\\n    }\\n\\n    /**\\n     * @dev handles multiple send tokens methods.\\n     * @param to address to send tokens to.\\n     * @param amount number of tokens to send.\\n     */\\n    function _sendTokens(address to, uint256 amount) internal {\\n        uint256 price = _price; // storage to memory\\n        if (price == 0) revert PriceNotSet();\\n\\n        User storage user = _userData[to]; // get user data\\n        uint256 claimed = user.tokensClaimed; // user.tokensClaimed is uint32\\n        claimed += amount;\\n\\n        if (claimed > (user.contribution / price)) revert CannotSendMoreThanUserPurchased();\\n        user.tokensClaimed = uint32(claimed);\\n        _internalMint(to, amount);\\n    }\\n\\n    /**\\n     * @notice get the number of tokens purchased by an address, after the\\n     *   clearing price has been set.\\n     * @param user user's address to query.\\n     */\\n    function amountPurchased(address user) public view returns (uint256) {\\n        if (_price == 0) revert PriceNotSet();\\n        return _userData[user].contribution / _price;\\n    }\\n\\n    /**\\n     * @notice get the refund amount for an account, after the clearing price\\n     *   has been set.\\n     * @param user user's address to query.\\n     */\\n    function refundAmount(address user) public view returns (uint256) {\\n        if (_price == 0) revert PriceNotSet();\\n        return _userData[user].contribution % _price;\\n    }\\n\\n    // functions for project owner to pay to send tokens/refund\\n\\n    /**\\n     * @notice mint tokens to an address.\\n     * @dev purchased amount for an address can be sent in multiple calls.\\n     *   Can only be called after clearing price has been set.\\n     * @param to address to send tokens to.\\n     * @param amount number of tokens to send.\\n     */\\n    function sendTokens(address to, uint256 amount) public onlyOwner {\\n        _sendTokens(to, amount);\\n    }\\n\\n    /**\\n     * @notice send all of an address's purchased tokens.\\n     * @dev if some tokens have already been sent, the remainder must be sent\\n     *   using sendTokens().\\n     * @param to address to send tokens to.\\n     */\\n    function sendAllTokens(address to) public onlyOwner {\\n        _sendTokens(to, amountPurchased(to));\\n    }\\n\\n    /**\\n     * @notice send refund to an address. Refunds are unsuccessful bids or\\n     *   an address's remaining eth after all their tokens have been paid for.\\n     * @dev can only be called after the clearing price has been set.\\n     * @param to the address to refund.\\n     */\\n    function sendRefund(address to) public onlyOwner {\\n        uint256 price = _price; // storage to memory\\n        if (price == 0) revert PriceNotSet();\\n\\n        User storage user = _userData[to]; // get user data\\n        if (user.refundClaimed) revert UserAlreadyClaimed();\\n        user.refundClaimed = true;\\n\\n        uint256 refundValue = user.contribution % price;\\n        (bool success, ) = to.call{value: refundValue}(\\\"\\\");\\n        if (!success) revert TransferFailed();\\n    }\\n\\n    /**\\n     * @notice send refunds to a batch of addresses.\\n     * @param addresses array of addresses to refund.\\n     */\\n    function sendRefundBatch(address[] calldata addresses) external onlyOwner {\\n        for (uint256 i; i < addresses.length; i++) {\\n            sendRefund(addresses[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice send tokens to a batch of addresses.\\n     * @param addresses array of addresses to send tokens to.\\n     */\\n    function sendTokensBatch(address[] calldata addresses) external onlyOwner {\\n        for (uint256 i; i < addresses.length; i++) {\\n            _sendTokens(addresses[i], amountPurchased(addresses[i]));\\n        }\\n    }\\n\\n    /**\\n     * @notice send refunds and tokens to an address.\\n     * @dev can only be called after the clearing price has been set.\\n     * @param to the address to refund.\\n     */\\n    function sendTokensAndRefund(address to) public onlyOwner nonReentrant {\\n        _sendTokensAndRefund(to);\\n    }\\n\\n    function claimTokensAndRefund() public isClaimable nonReentrant {\\n        _sendTokensAndRefund(msg.sender);\\n    }\\n\\n    function _sendTokensAndRefund(address to) internal {\\n        uint256 price = _price;\\n        if (price == 0) revert PriceNotSet();\\n\\n        User storage user = _userData[to]; // get user data\\n        uint256 userContribution = user.contribution;\\n\\n        // send refund\\n        if (user.refundClaimed) revert UserAlreadyClaimed();\\n        user.refundClaimed = true;\\n        uint256 refundValue = user.contribution % price;\\n        (bool success, ) = to.call{value: refundValue}(\\\"\\\");\\n        if (!success) revert TransferFailed();\\n\\n        // send tokens\\n        uint256 amount = userContribution / price;\\n        if (amount > 0) {\\n            if (user.tokensClaimed != 0) revert AlreadySentTokensToUser();\\n            user.tokensClaimed = uint32(amount);\\n            _internalMint(to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice send refunds and tokens to a batch of addresses.\\n     * @param addresses array of addresses to send tokens to.\\n     */\\n    function sendTokensAndRefundBatch(address[] calldata addresses) external onlyOwner {\\n        for (uint256 i; i < addresses.length; i++) {\\n            sendTokensAndRefund(addresses[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x65cc39b8396e7ebb4d5296343c9588f577386556d98968f88d11d4acb285db3f\",\"license\":\"MIT\"},\"contracts/ERC721I.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721I Contracts v1.0.0\\n// Creator: Illumia Labs\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"erc721a/contracts/extensions/ERC721AQueryable.sol\\\";\\nimport \\\"./interfaces/IERC721I.sol\\\";\\n\\ncontract ERC721I is IERC721I, ERC721AQueryable, Ownable, ReentrancyGuard {\\n    using ECDSA for bytes32;\\n\\n    uint64 public constant MIN_STAGE_INTERVAL_SECONDS = 60;\\n    uint64 public constant CROSSMINT_TIMESTAMP_EXPIRY_SECONDS = 300;\\n\\n    bool private _mintable;\\n    string private _currentBaseURI;\\n    uint256 private _activeStage;\\n    uint256 private _maxMintableSupply;\\n    uint256 private _globalWalletLimit;\\n    string private _tokenURISuffix;\\n    bool private _baseURIPermanent;\\n    address private _cosigner;\\n    address private _crossmintAddress;\\n\\n    MintStageInfo[] private _mintStages;\\n\\n    // Need this because struct cannot have nested mapping\\n    mapping(uint256 => mapping(address => uint32)) private _stageMintedCountsPerWallet;\\n    mapping(uint256 => uint256) private _stageMintedCounts;\\n\\n    constructor(\\n        string memory collectionName,\\n        string memory collectionSymbol,\\n        string memory tokenURISuffix,\\n        uint256 maxMintableSupply,\\n        uint256 globalWalletLimit,\\n        address cosigner\\n    ) ERC721A(collectionName, collectionSymbol) {\\n        if (globalWalletLimit > maxMintableSupply) revert GlobalWalletLimitOverflow();\\n\\n        _mintable = true;\\n        _maxMintableSupply = maxMintableSupply;\\n        _globalWalletLimit = globalWalletLimit;\\n        _tokenURISuffix = tokenURISuffix;\\n        _cosigner = cosigner; // ethers.constants.AddressZero for no cosigning\\n    }\\n\\n    modifier canMint() {\\n        if (!_mintable) revert NotMintable();\\n        _;\\n    }\\n\\n    modifier hasSupply(uint256 qty) {\\n        if (totalSupply() + qty > _maxMintableSupply) revert NoSupplyLeft();\\n        _;\\n    }\\n\\n    function getCosigner() external view override returns (address) {\\n        return _cosigner;\\n    }\\n\\n    function getCosignNonce(address minter) public view returns (uint256) {\\n        return _numberMinted(minter);\\n    }\\n\\n    function setCosigner(address cosigner) external onlyOwner {\\n        _cosigner = cosigner;\\n        emit SetCosigner(cosigner);\\n    }\\n\\n    function getCrossmintAddress() external view override returns (address) {\\n        return _crossmintAddress;\\n    }\\n\\n    function setCrossmintAddress(address crossmintAddress) external onlyOwner {\\n        _crossmintAddress = crossmintAddress;\\n        emit SetCrossmintAddress(crossmintAddress);\\n    }\\n\\n    function setStages(MintStageInfo[] calldata newStages) external onlyOwner {\\n        uint256 originalSize = _mintStages.length;\\n        for (uint256 i = 0; i < originalSize; i++) {\\n            _mintStages.pop();\\n        }\\n\\n        for (uint256 i = 0; i < newStages.length; i++) {\\n            if (i >= 1) {\\n                if (\\n                    newStages[i].startTimeUnixSeconds <\\n                    newStages[i - 1].endTimeUnixSeconds + MIN_STAGE_INTERVAL_SECONDS\\n                ) {\\n                    revert InsufficientStageTimeGap();\\n                }\\n            }\\n            _assertValidStartAndEndTimestamp(\\n                newStages[i].startTimeUnixSeconds,\\n                newStages[i].endTimeUnixSeconds\\n            );\\n            _mintStages.push(\\n                MintStageInfo({\\n                    price: newStages[i].price,\\n                    walletLimit: newStages[i].walletLimit,\\n                    merkleRoot: newStages[i].merkleRoot,\\n                    maxStageSupply: newStages[i].maxStageSupply,\\n                    startTimeUnixSeconds: newStages[i].startTimeUnixSeconds,\\n                    endTimeUnixSeconds: newStages[i].endTimeUnixSeconds\\n                })\\n            );\\n            emit UpdateStage(\\n                i,\\n                newStages[i].price,\\n                newStages[i].walletLimit,\\n                newStages[i].merkleRoot,\\n                newStages[i].maxStageSupply,\\n                newStages[i].startTimeUnixSeconds,\\n                newStages[i].endTimeUnixSeconds\\n            );\\n        }\\n    }\\n\\n    function getMintable() external view override returns (bool) {\\n        return _mintable;\\n    }\\n\\n    function setMintable(bool mintable) external onlyOwner {\\n        _mintable = mintable;\\n        emit SetMintable(mintable);\\n    }\\n\\n    function getNumberStages() external view override returns (uint256) {\\n        return _mintStages.length;\\n    }\\n\\n    function getMaxMintableSupply() external view override returns (uint256) {\\n        return _maxMintableSupply;\\n    }\\n\\n    function setMaxMintableSupply(uint256 maxMintableSupply) external onlyOwner {\\n        if (maxMintableSupply > _maxMintableSupply) {\\n            revert CannotIncreaseMaxMintableSupply();\\n        }\\n        _maxMintableSupply = maxMintableSupply;\\n        emit SetMaxMintableSupply(maxMintableSupply);\\n    }\\n\\n    function getGlobalWalletLimit() external view override returns (uint256) {\\n        return _globalWalletLimit;\\n    }\\n\\n    function setGlobalWalletLimit(uint256 globalWalletLimit) external onlyOwner {\\n        if (globalWalletLimit > _maxMintableSupply) revert GlobalWalletLimitOverflow();\\n        _globalWalletLimit = globalWalletLimit;\\n        emit SetGlobalWalletLimit(globalWalletLimit);\\n    }\\n\\n    function getActiveStage() external view override returns (uint256) {\\n        return _activeStage;\\n    }\\n\\n    function setActiveStage(uint256 activeStage) external onlyOwner {\\n        if (activeStage >= _mintStages.length) revert InvalidStage();\\n        _activeStage = activeStage;\\n        emit SetActiveStage(activeStage);\\n    }\\n\\n    function totalMintedByAddress(address a) external view override returns (uint256) {\\n        return _numberMinted(a);\\n    }\\n\\n    function getStageInfo(\\n        uint256 index\\n    ) external view override returns (MintStageInfo memory, uint32, uint256) {\\n        if (index >= _mintStages.length) {\\n            revert(\\\"InvalidStage\\\");\\n        }\\n        uint32 walletMinted = _stageMintedCountsPerWallet[index][msg.sender];\\n        uint256 stageMinted = _stageMintedCounts[index];\\n        return (_mintStages[index], walletMinted, stageMinted);\\n    }\\n\\n    function updateStage(\\n        uint256 index,\\n        uint80 price,\\n        uint32 walletLimit,\\n        bytes32 merkleRoot,\\n        uint24 maxStageSupply,\\n        uint64 startTimeUnixSeconds,\\n        uint64 endTimeUnixSeconds\\n    ) external onlyOwner {\\n        if (index >= _mintStages.length) revert InvalidStage();\\n        if (index >= 1) {\\n            if (\\n                startTimeUnixSeconds <\\n                _mintStages[index - 1].endTimeUnixSeconds + MIN_STAGE_INTERVAL_SECONDS\\n            ) {\\n                revert InsufficientStageTimeGap();\\n            }\\n        }\\n        _assertValidStartAndEndTimestamp(startTimeUnixSeconds, endTimeUnixSeconds);\\n        _mintStages[index].price = price;\\n        _mintStages[index].walletLimit = walletLimit;\\n        _mintStages[index].merkleRoot = merkleRoot;\\n        _mintStages[index].maxStageSupply = maxStageSupply;\\n        _mintStages[index].startTimeUnixSeconds = startTimeUnixSeconds;\\n        _mintStages[index].endTimeUnixSeconds = endTimeUnixSeconds;\\n\\n        emit UpdateStage(\\n            index,\\n            price,\\n            walletLimit,\\n            merkleRoot,\\n            maxStageSupply,\\n            startTimeUnixSeconds,\\n            endTimeUnixSeconds\\n        );\\n    }\\n\\n    function mint(\\n        uint32 qty,\\n        bytes32[] calldata proof,\\n        uint64 timestamp,\\n        bytes calldata signature\\n    ) external payable nonReentrant {\\n        _mintInternal(qty, msg.sender, proof, timestamp, signature);\\n    }\\n\\n    function crossmint(\\n        uint32 qty,\\n        address to,\\n        bytes32[] calldata proof,\\n        uint64 timestamp,\\n        bytes calldata signature\\n    ) external payable nonReentrant {\\n        if (_crossmintAddress == address(0)) revert CrossmintAddressNotSet();\\n\\n        // Check the caller is Crossmint\\n        if (msg.sender != _crossmintAddress) revert CrossmintOnly();\\n\\n        _mintInternal(qty, to, proof, timestamp, signature);\\n    }\\n\\n    function _mintInternal(\\n        uint32 qty,\\n        address to,\\n        bytes32[] calldata proof,\\n        uint64 timestamp,\\n        bytes calldata signature\\n    ) internal canMint hasSupply(qty) {\\n        uint256 activeStage = _activeStage;\\n\\n        if (activeStage >= _mintStages.length) revert InvalidStage();\\n\\n        MintStageInfo memory stage;\\n        if (_cosigner != address(0)) {\\n            assertValidCosign(msg.sender, qty, timestamp, signature);\\n            _assertValidTimestamp(timestamp);\\n            activeStage = getActiveStageFromTimestamp(timestamp);\\n        }\\n\\n        stage = _mintStages[activeStage];\\n\\n        // Check value\\n        if (msg.value < stage.price * qty) revert NotEnoughValue();\\n\\n        // Check stage supply if applicable\\n        if (stage.maxStageSupply > 0) {\\n            if (_stageMintedCounts[activeStage] + qty > stage.maxStageSupply)\\n                revert StageSupplyExceeded();\\n        }\\n\\n        // Check global wallet limit if applicable\\n        if (_globalWalletLimit > 0) {\\n            if (_numberMinted(to) + qty > _globalWalletLimit) revert WalletGlobalLimitExceeded();\\n        }\\n\\n        // Check wallet limit for stage if applicable, limit == 0 means no limit enforced\\n        if (stage.walletLimit > 0) {\\n            if (_stageMintedCountsPerWallet[activeStage][to] + qty > stage.walletLimit)\\n                revert WalletStageLimitExceeded();\\n        }\\n\\n        // Check merkle proof if applicable, merkleRoot == 0x00...00 means no proof required\\n        if (stage.merkleRoot != 0) {\\n            if (\\n                MerkleProof.processProof(proof, keccak256(abi.encodePacked(to))) != stage.merkleRoot\\n            ) revert InvalidProof();\\n        }\\n\\n        _stageMintedCountsPerWallet[activeStage][to] += qty;\\n        _stageMintedCounts[activeStage] += qty;\\n        _safeMint(to, qty);\\n    }\\n\\n    function ownerMint(uint32 qty, address to) external onlyOwner hasSupply(qty) {\\n        _safeMint(to, qty);\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        uint256 value = address(this).balance;\\n        (bool success, ) = msg.sender.call{value: value}(\\\"\\\");\\n        if (!success) revert WithdrawFailed();\\n        emit Withdraw(value);\\n    }\\n\\n    function setBaseURI(string calldata baseURI) external onlyOwner {\\n        if (_baseURIPermanent) revert CannotUpdatePermanentBaseURI();\\n        _currentBaseURI = baseURI;\\n        emit SetBaseURI(baseURI);\\n    }\\n\\n    function setBaseURIPermanent() external onlyOwner {\\n        _baseURIPermanent = true;\\n        emit PermanentBaseURI(_currentBaseURI);\\n    }\\n\\n    function getTokenURISuffix() external view override returns (string memory) {\\n        return _tokenURISuffix;\\n    }\\n\\n    function setTokenURISuffix(string calldata suffix) external onlyOwner {\\n        _tokenURISuffix = suffix;\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override(ERC721A, IERC721A) returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _currentBaseURI;\\n        return\\n            bytes(baseURI).length != 0\\n                ? string(abi.encodePacked(baseURI, _toString(tokenId), _tokenURISuffix))\\n                : \\\"\\\";\\n    }\\n\\n    function getCosignDigest(\\n        address minter,\\n        uint32 qty,\\n        uint64 timestamp\\n    ) public view returns (bytes32) {\\n        if (_cosigner == address(0)) revert CosignerNotSet();\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    address(this),\\n                    minter,\\n                    qty,\\n                    _cosigner,\\n                    timestamp,\\n                    _chainID(),\\n                    getCosignNonce(minter)\\n                )\\n            ).toEthSignedMessageHash();\\n    }\\n\\n    function assertValidCosign(\\n        address minter,\\n        uint32 qty,\\n        uint64 timestamp,\\n        bytes memory signature\\n    ) public view override {\\n        if (\\n            !SignatureChecker.isValidSignatureNow(\\n                _cosigner,\\n                getCosignDigest(minter, qty, timestamp),\\n                signature\\n            )\\n        ) revert InvalidCosignSignature();\\n    }\\n\\n    function getActiveStageFromTimestamp(uint64 timestamp) public view override returns (uint256) {\\n        for (uint256 i = 0; i < _mintStages.length; i++) {\\n            if (\\n                timestamp >= _mintStages[i].startTimeUnixSeconds &&\\n                timestamp < _mintStages[i].endTimeUnixSeconds\\n            ) {\\n                return i;\\n            }\\n        }\\n        revert InvalidStage();\\n    }\\n\\n    function _assertValidTimestamp(uint64 timestamp) internal view {\\n        uint64 threshold = msg.sender == _crossmintAddress\\n            ? CROSSMINT_TIMESTAMP_EXPIRY_SECONDS\\n            : MIN_STAGE_INTERVAL_SECONDS;\\n        if (timestamp < block.timestamp - threshold) revert TimestampExpired();\\n    }\\n\\n    function _assertValidStartAndEndTimestamp(uint64 start, uint64 end) internal pure {\\n        if (start >= end) revert InvalidStartAndEndTimestamp();\\n    }\\n\\n    function _chainID() private view returns (uint256) {\\n        uint256 chainID;\\n        assembly {\\n            chainID := chainid()\\n        }\\n        return chainID;\\n    }\\n}\\n\",\"keccak256\":\"0x2fb32f40b5b4d385cbde59b2753028c3f8ab2610e475b698965a13611111bb71\",\"license\":\"MIT\"},\"contracts/interfaces/IBucketAuction.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IBucketAuction {\\n    error AlreadySentTokensToUser();\\n    error BucketAuctionActive();\\n    error BucketAuctionNotActive();\\n    error CannotSendMoreThanUserPurchased();\\n    error CannotSetPriceIfClaimable();\\n    error CannotSetPriceIfFirstTokenSent();\\n    error LowerThanMinBidAmount();\\n    error NotClaimable();\\n    error PriceHasBeenSet();\\n    error PriceNotSet();\\n    error TransferFailed();\\n    error UserAlreadyClaimed();\\n\\n    struct User {\\n        uint216 contribution; // cumulative sum of ETH bids\\n        uint32 tokensClaimed; // tracker for claimed tokens\\n        bool refundClaimed; // has user been refunded yet\\n    }\\n\\n    event Bid(address indexed bidder, uint256 bidAmount, uint256 bidderTotal, uint256 bucketTotal);\\n    event SetMinimumContribution(uint256 minimumContributionInWei);\\n    event SetPrice(uint256 price);\\n    event SetClaimable(bool claimable);\\n}\\n\",\"keccak256\":\"0x490239af755d520ff42219e3ff445c7ae988e3729fec610a850459b2f9cdb677\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721I.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// ERC721I Contracts v1.0.0\\n// Creator: Illumia Labs\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"erc721a/contracts/extensions/IERC721AQueryable.sol\\\";\\n\\ninterface IERC721I is IERC721AQueryable {\\n    error CannotIncreaseMaxMintableSupply();\\n    error CannotUpdatePermanentBaseURI();\\n    error CosignerNotSet();\\n    error CrossmintAddressNotSet();\\n    error CrossmintOnly();\\n    error GlobalWalletLimitOverflow();\\n    error InsufficientStageTimeGap();\\n    error InvalidCosignSignature();\\n    error InvalidProof();\\n    error InvalidStage();\\n    error InvalidStageArgsLength();\\n    error InvalidStartAndEndTimestamp();\\n    error NoSupplyLeft();\\n    error NotEnoughValue();\\n    error NotMintable();\\n    error StageSupplyExceeded();\\n    error TimestampExpired();\\n    error WalletGlobalLimitExceeded();\\n    error WalletStageLimitExceeded();\\n    error WithdrawFailed();\\n\\n    struct MintStageInfo {\\n        uint80 price;\\n        uint32 walletLimit; // 0 for unlimited\\n        bytes32 merkleRoot; // 0x0 for no presale enforced\\n        uint24 maxStageSupply; // 0 for unlimited\\n        uint64 startTimeUnixSeconds;\\n        uint64 endTimeUnixSeconds;\\n    }\\n\\n    event UpdateStage(\\n        uint256 stage,\\n        uint80 price,\\n        uint32 walletLimit,\\n        bytes32 merkleRoot,\\n        uint24 maxStageSupply,\\n        uint64 startTimeUnixSeconds,\\n        uint64 endTimeUnixSeconds\\n    );\\n\\n    event SetCosigner(address cosigner);\\n    event SetCrossmintAddress(address crossmintAddress);\\n    event SetMintable(bool mintable);\\n    event SetMaxMintableSupply(uint256 maxMintableSupply);\\n    event SetGlobalWalletLimit(uint256 globalWalletLimit);\\n    event SetActiveStage(uint256 activeStage);\\n    event SetBaseURI(string baseURI);\\n    event PermanentBaseURI(string baseURI);\\n    event Withdraw(uint256 value);\\n\\n    function getCosigner() external view returns (address);\\n\\n    function getCrossmintAddress() external view returns (address);\\n\\n    function getNumberStages() external view returns (uint256);\\n\\n    function getGlobalWalletLimit() external view returns (uint256);\\n\\n    function getMaxMintableSupply() external view returns (uint256);\\n\\n    function getMintable() external view returns (bool);\\n\\n    function totalMintedByAddress(address a) external view returns (uint256);\\n\\n    function getTokenURISuffix() external view returns (string memory);\\n\\n    function getStageInfo(\\n        uint256 index\\n    ) external view returns (MintStageInfo memory, uint32, uint256);\\n\\n    function getActiveStage() external view returns (uint256);\\n\\n    function getActiveStageFromTimestamp(uint64 timestamp) external view returns (uint256);\\n\\n    function assertValidCosign(\\n        address minter,\\n        uint32 qty,\\n        uint64 timestamp,\\n        bytes memory signature\\n    ) external view;\\n}\\n\",\"keccak256\":\"0xef5dd3aca4c77dfdd5dd5277e608437884ee2ba8d274ca323aafcde8a59a80ac\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/ERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721AQueryable.sol';\\nimport '../ERC721A.sol';\\n\\n/**\\n * @title ERC721AQueryable.\\n *\\n * @dev ERC721A subclass with convenience query functions.\\n */\\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) public view virtual override returns (TokenOwnership memory) {\\n        TokenOwnership memory ownership;\\n        if (tokenId < _startTokenId() || tokenId >= _nextTokenId()) {\\n            return ownership;\\n        }\\n        ownership = _ownershipAt(tokenId);\\n        if (ownership.burned) {\\n            return ownership;\\n        }\\n        return _ownershipOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (TokenOwnership[] memory)\\n    {\\n        unchecked {\\n            uint256 tokenIdsLength = tokenIds.length;\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\n            }\\n            return ownerships;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            if (start >= stop) revert InvalidQueryRange();\\n            uint256 tokenIdsIdx;\\n            uint256 stopLimit = _nextTokenId();\\n            // Set `start = max(start, _startTokenId())`.\\n            if (start < _startTokenId()) {\\n                start = _startTokenId();\\n            }\\n            // Set `stop = min(stop, stopLimit)`.\\n            if (stop > stopLimit) {\\n                stop = stopLimit;\\n            }\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\n            // to cater for cases where `balanceOf(owner)` is too big.\\n            if (start < stop) {\\n                uint256 rangeLength = stop - start;\\n                if (rangeLength < tokenIdsMaxLength) {\\n                    tokenIdsMaxLength = rangeLength;\\n                }\\n            } else {\\n                tokenIdsMaxLength = 0;\\n            }\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\n            if (tokenIdsMaxLength == 0) {\\n                return tokenIds;\\n            }\\n            // We need to call `explicitOwnershipOf(start)`,\\n            // because the slot at `start` may not be initialized.\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\n            address currOwnershipAddr;\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\n            if (!ownership.burned) {\\n                currOwnershipAddr = ownership.addr;\\n            }\\n            for (uint256 i = start; i != stop && tokenIdsIdx != tokenIdsMaxLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            // Downsize the array to fit.\\n            assembly {\\n                mstore(tokenIds, tokenIdsIdx)\\n            }\\n            return tokenIds;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            address currOwnershipAddr;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            TokenOwnership memory ownership;\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                ownership = _ownershipAt(i);\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    tokenIds[tokenIdsIdx++] = i;\\n                }\\n            }\\n            return tokenIds;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad83a36e9758f044317e9a5e2903bc49730b6d5de8fbe9a61b2f91fb4c2148c7\",\"license\":\"MIT\"},\"erc721a/contracts/extensions/IERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` >= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = <Address of owner before token was burned>`\\n     * - `startTimestamp = <Timestamp when token was burned>`\\n     * - `burned = true`\\n     * - `extraData = <Extra data when token was burned>`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = <Address of owner>`\\n     * - `startTimestamp = <Timestamp of start of ownership>`\\n     * - `burned = false`\\n     * - `extraData = <Extra data at start of ownership>`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start <= tokenId < stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start < stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xc14fc938aecdccee7edbd3a3ce60b6171cdc3da3345cfa6d288c268983c48942\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200548b3803806200548b833981016040819052620000349162000293565b888888888888858560026200004a838262000409565b50600362000059828262000409565b505060008055506200006b3362000147565b6001600955828211156200009257604051630590c51360e01b815260040160405180910390fd5b600a805460ff19166001179055600d839055600e829055600f620000b7858262000409565b5060108054610100600160a81b0319166101006001600160a01b03939093169290920291909117905550506015805460169790975561ff01600160901b0319909616620100006001600160401b0396871602600160501b600160901b031916176a010000000000000000000094909516939093029390931761ff00191690935550620004d5975050505050505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001c157600080fd5b81516001600160401b0380821115620001de57620001de62000199565b604051601f8301601f19908116603f0116810190828211818310171562000209576200020962000199565b816040528381526020925086838588010111156200022657600080fd5b600091505b838210156200024a57858201830151818301840152908201906200022b565b600093810190920192909252949350505050565b80516001600160a01b03811681146200027657600080fd5b919050565b80516001600160401b03811681146200027657600080fd5b60008060008060008060008060006101208a8c031215620002b357600080fd5b89516001600160401b0380821115620002cb57600080fd5b620002d98d838e01620001af565b9a5060208c0151915080821115620002f057600080fd5b620002fe8d838e01620001af565b995060408c01519150808211156200031557600080fd5b50620003248c828d01620001af565b97505060608a0151955060808a015194506200034360a08b016200025e565b935060c08a015192506200035a60e08b016200027b565b91506200036b6101008b016200027b565b90509295985092959850929598565b600181811c908216806200038f57607f821691505b602082108103620003b057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200040457600081815260208120601f850160051c81016020861015620003df5750805b601f850160051c820191505b818110156200040057828155600101620003eb565b5050505b505050565b81516001600160401b0381111562000425576200042562000199565b6200043d816200043684546200037a565b84620003b6565b602080601f8311600181146200047557600084156200045c5750858301515b600019600386901b1c1916600185901b17855562000400565b600085815260208120601f198616915b82811015620004a65788860151825594840194600190910190840162000485565b5085821015620004c55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b614fa680620004e56000396000f3fe6080604052600436106104475760003560e01c80638f93151111610234578063b7a9fa601161012e578063e985e9c5116100b6578063efdaa2ec1161007a578063efdaa2ec14610d2d578063f2fde38b14610d42578063f698bceb14610d62578063f8d0969614610d7a578063ffc9896b14610d9a57600080fd5b8063e985e9c514610c75578063e9d7c06814610cbe578063ed2e2b0214610cd3578063ee28b74414610d02578063efb6b11f14610d1a57600080fd5b8063c87b56dd116100fd578063c87b56dd14610be0578063cae4d67614610c00578063d956634f14610c20578063db422e0b14610c35578063dba3e70414610c5557600080fd5b8063b7a9fa6014610b6b578063b88d4fde14610b80578063c02bd9a514610b93578063c23dc68f14610bb357600080fd5b8063a06c492f116101bc578063a718cd4e11610180578063a718cd4e14610acb578063a9852bfb14610aeb578063aac5ab1f14610b0b578063acde5d2814610b2b578063b50248e714610b4b57600080fd5b8063a06c492f1461092b578063a22cb465146109ca578063a3759f60146109ea578063a466cb1a14610a86578063a6239bb814610aa657600080fd5b806398d5fdca1161020357806398d5fdca1461094b578063997556241461096057806399a2557a146109805780639a3814ab146109a05780639be572f6146109b557600080fd5b80638f931511146108d857806391b7f5ed146108f657806395d89b411461091657806397cf84fc1461092b57600080fd5b80633ccfd60b1161034557806370a08231116102cd5780638462151c116102915780638462151c14610838578063896086de146108655780638bcccb63146108855780638da5cb5b1461089a5780638dcdb09d146108b857600080fd5b806370a08231146107b957806370da24ee146107d9578063715018a6146107ee57806373e1607e1461080357806374d186621461082357600080fd5b80635b910336116103145780635b910336146107195780635bbb21771461073957806362acbd9a146107665780636352211e1461077957806367808a341461079957600080fd5b80633ccfd60b146106bc57806342842e0e146106d15780634b1c53b4146106e457806355f804b3146106f957600080fd5b806318160ddd116103d3578063285d70d411610397578063285d70d41461061957806333bbbf0614610639578063372992e41461065c578063378c93ad1461067c578063379a02061461069c57600080fd5b806318160ddd146105a15780631998aeef146105ba5780631ce03eed146105c2578063217d6988146105e257806323b872dd1461060657600080fd5b8063074ba79d1161041a578063074ba79d146104e5578063081812fc14610513578063095ea7b31461054b5780631053a8151461055e578063174f909c1461057357600080fd5b806301ffc9a71461044c578063020451381461048157806305ab421d146104a357806306fdde03146104c3575b600080fd5b34801561045857600080fd5b5061046c6104673660046140d9565b610e31565b60405190151581526020015b60405180910390f35b34801561048d57600080fd5b506104a161049c366004614112565b610e83565b005b3480156104af57600080fd5b506104a16104be36600461412d565b610ee8565b3480156104cf57600080fd5b506104d8610efe565b60405161047891906141a7565b3480156104f157600080fd5b50610505610500366004614112565b610f90565b604051908152602001610478565b34801561051f57600080fd5b5061053361052e3660046141ba565b610fe4565b6040516001600160a01b039091168152602001610478565b6104a161055936600461412d565b611028565b34801561056a57600080fd5b506104a16110c8565b34801561057f57600080fd5b5061058961012c81565b6040516001600160401b039091168152602001610478565b3480156105ad57600080fd5b5060015460005403610505565b6104a1611118565b3480156105ce57600080fd5b506105056105dd3660046141fe565b61124b565b3480156105ee57600080fd5b506015546201000090046001600160401b0316610589565b6104a1610614366004614241565b61138b565b34801561062557600080fd5b506104a161063436600461428d565b611524565b34801561064557600080fd5b5060105461010090046001600160a01b0316610533565b34801561066857600080fd5b506104a16106773660046141ba565b61156d565b34801561068857600080fd5b506104a161069736600461428d565b6115cd565b3480156106a857600080fd5b506104a16106b73660046142a8565b611616565b3480156106c857600080fd5b506104a16116be565b6104a16106df366004614241565b611769565b3480156106f057600080fd5b50600d54610505565b34801561070557600080fd5b506104a161071436600461431c565b611789565b34801561072557600080fd5b506104a16107343660046143a1565b6117f4565b34801561074557600080fd5b506107596107543660046143a1565b611872565b6040516104789190614412565b6104a1610774366004614454565b61193d565b34801561078557600080fd5b506105336107943660046141ba565b6119d5565b3480156107a557600080fd5b506105056107b43660046144f8565b6119e0565b3480156107c557600080fd5b506105056107d4366004614112565b611aa8565b3480156107e557600080fd5b50601254610505565b3480156107fa57600080fd5b506104a1611af6565b34801561080f57600080fd5b506104a161081e36600461453d565b611b0a565b34801561082f57600080fd5b50610589603c81565b34801561084457600080fd5b50610858610853366004614112565b611d9a565b60405161047891906145b5565b34801561087157600080fd5b506104a16108803660046141ba565b611ea2565b34801561089157600080fd5b50601654610505565b3480156108a657600080fd5b506008546001600160a01b0316610533565b3480156108c457600080fd5b506104a16108d33660046145ed565b611f01565b3480156108e457600080fd5b506011546001600160a01b0316610533565b34801561090257600080fd5b506104a16109113660046141ba565b6123c4565b34801561092257600080fd5b506104d8612480565b34801561093757600080fd5b50610505610946366004614112565b61248f565b34801561095757600080fd5b50601754610505565b34801561096c57600080fd5b506104a161097b366004614112565b6124b9565b34801561098c57600080fd5b5061085861099b366004614661565b61250f565b3480156109ac57600080fd5b50600c54610505565b3480156109c157600080fd5b50610505612686565b3480156109d657600080fd5b506104a16109e5366004614694565b612697565b3480156109f657600080fd5b50610a0a610a053660046141ba565b612703565b6040805184516001600160501b0316815260208086015163ffffffff90811691830191909152858301519282019290925260608086015162ffffff16908201526080808601516001600160401b039081169183019190915260a095860151169481019490945290911660c083015260e082015261010001610478565b348015610a9257600080fd5b506104a1610aa13660046143a1565b612847565b348015610ab257600080fd5b50601554600160501b90046001600160401b0316610589565b348015610ad757600080fd5b506104a1610ae63660046143a1565b612896565b348015610af757600080fd5b506104a1610b0636600461431c565b6128e5565b348015610b1757600080fd5b506104a1610b263660046146be565b6128fa565b348015610b3757600080fd5b50610505610b46366004614112565b612953565b348015610b5757600080fd5b506104a1610b6636600461478a565b6129a7565b348015610b7757600080fd5b506104d86129e9565b6104a1610b8e3660046147f8565b6129f8565b348015610b9f57600080fd5b506104a1610bae366004614112565b612a3c565b348015610bbf57600080fd5b50610bd3610bce3660046141ba565b612a54565b6040516104789190614847565b348015610bec57600080fd5b506104d8610bfb3660046141ba565b612acc565b348015610c0c57600080fd5b506104a1610c1b366004614112565b612bd5565b348015610c2c57600080fd5b506104a1612cec565b348015610c4157600080fd5b506104a1610c50366004614112565b612d46565b348015610c6157600080fd5b506104a1610c703660046141ba565b612d86565b348015610c8157600080fd5b5061046c610c90366004614855565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b348015610cca57600080fd5b5061046c612dc3565b348015610cdf57600080fd5b50610cf3610cee366004614871565b612dfc565b60405161047893929190614893565b348015610d0e57600080fd5b5060155460ff1661046c565b6104a1610d2836600461494e565b612fc9565b348015610d3957600080fd5b50600e54610505565b348015610d4e57600080fd5b506104a1610d5d366004614112565b61300c565b348015610d6e57600080fd5b50600a5460ff1661046c565b348015610d8657600080fd5b506104a1610d953660046141ba565b613082565b348015610da657600080fd5b50610e24610db5366004614112565b6040805160608082018352600080835260208084018290529284018190526001600160a01b03949094168452601882529282902082519384018352546001600160d81b0381168452600160d81b810463ffffffff1691840191909152600160f81b900460ff1615159082015290565b60405161047891906149e1565b60006301ffc9a760e01b6001600160e01b031983161480610e6257506380ac58cd60e01b6001600160e01b03198316145b80610e7d5750635b5e139f60e01b6001600160e01b03198316145b92915050565b610e8b6130e2565b60108054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527faea1573caf7b4fdd079b947d86c1be6c725642c47582f8f9bd2c7d2a30bf0bd9906020015b60405180910390a150565b610ef06130e2565b610efa828261313c565b5050565b606060028054610f0d90614a13565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3990614a13565b8015610f865780601f10610f5b57610100808354040283529160200191610f86565b820191906000526020600020905b815481529060010190602001808311610f6957829003601f168201915b5050505050905090565b6000601754600003610fb5576040516313a8ad7d60e11b815260040160405180910390fd5b6017546001600160a01b038316600090815260186020526040902054610e7d91906001600160d81b0316614a79565b6000610fef826131f1565b61100c576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000611033826119d5565b9050336001600160a01b0382161461106c5761104f8133610c90565b61106c576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6110d06130e2565b6010805460ff191660011790556040517fc6a6c2b165e62c9d37fc51a18ed76e5be22304bc1d337877c98f31c23e40b0f59061110e90600b90614a8d565b60405180910390a1565b60155442620100009091046001600160401b0316118061114b575060155442600160501b9091046001600160401b031611155b15611169576040516307d6617160e31b815260040160405180910390fd5b6002600954036111945760405162461bcd60e51b815260040161118b90614b18565b60405180910390fd5b600260095533600090815260186020526040902080546016546001600160d81b039091163401908110156111db5760405163dd828e1560e01b815260040160405180910390fd5b81546001600160d81b0319166001600160d81b0382161782556111ff601933613218565b5060408051348152602081018390524781830152905133917f4dcc013473324698bfbe263facec4ea4b1bc43624236542deabec62c2122b305919081900360600190a250506001600955565b60105460009061010090046001600160a01b031661127c576040516353bd4fb360e11b815260040160405180910390fd5b611381308585601060019054906101000a90046001600160a01b0316866112a04690565b6112a98b61248f565b604051606097881b6bffffffffffffffffffffffff19908116602083015296881b8716603482015260e09590951b6001600160e01b031916604886015292861b909416604c84015260c01b6001600160c01b031916938201939093526068810191909152608881019190915260a801604051602081830303815290604052805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90505b9392505050565b60006113968261322d565b9050836001600160a01b0316816001600160a01b0316146113c95760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b03881690911417611416576113f98633610c90565b61141657604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03851661143d57604051633a954ecd60e21b815260040160405180910390fd5b801561144857600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b841690036114da576001840160008181526004602052604081205490036114d85760005481146114d85760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b61152c6130e2565b600a805460ff19168215159081179091556040519081527fe717a2bfc51e250b028aaac5eb448e76f4df26b9609956782bff49097bb792cf90602001610edd565b6115756130e2565b600d5481111561159857604051630590c51360e01b815260040160405180910390fd5b600e8190556040518181527f5307de8ad7d34d5ddfd5171435c143bdc645493980f453eb5d7cdb3e494a1b3590602001610edd565b6115d56130e2565b6015805460ff19168215159081179091556040519081527f18d99b89a15641fa45e09c4916c435eb2bee98b29a0157c251869471e0cf28c990602001610edd565b61161e6130e2565b6017541561163f57604051632b67583760e21b815260040160405180910390fd5b816001600160401b0316816001600160401b03161161167157604051631750215560e11b815260040160405180910390fd5b6015805471ffffffffffffffffffffffffffffffff00001916620100006001600160401b039485160267ffffffffffffffff60501b191617600160501b9290931691909102919091179055565b6116c66130e2565b6040514790600090339083908381818185875af1925050503d806000811461170a576040519150601f19603f3d011682016040523d82523d6000602084013e61170f565b606091505b505090508061173157604051631d42c86760e21b815260040160405180910390fd5b6040518281527f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d906020015b60405180910390a15050565b611784838383604051806020016040528060008152506129f8565b505050565b6117916130e2565b60105460ff16156117b5576040516306ccad4160e41b815260040160405180910390fd5b600b6117c2828483614b95565b507f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa828260405161175d929190614c54565b6117fc6130e2565b60005b818110156117845761186083838381811061181c5761181c614c83565b90506020020160208101906118319190614112565b61185b85858581811061184657611846614c83565b90506020020160208101906105009190614112565b61313c565b8061186a81614c99565b9150506117ff565b6060816000816001600160401b0381111561188f5761188f6146e8565b6040519080825280602002602001820160405280156118e157816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816118ad5790505b50905060005b8281146119345761190f86868381811061190357611903614c83565b90506020020135612a54565b82828151811061192157611921614c83565b60209081029190910101526001016118e7565b50949350505050565b60026009540361195f5760405162461bcd60e51b815260040161118b90614b18565b60026009556011546001600160a01b031661198d57604051637e9f68eb60e11b815260040160405180910390fd5b6011546001600160a01b031633146119b85760405163f46fd68360e01b815260040160405180910390fd5b6119c787878787878787613294565b505060016009555050505050565b6000610e7d8261322d565b6000805b601254811015611a8e5760128181548110611a0157611a01614c83565b60009182526020909120600260039092020101546001600160401b036301000000909104811690841610801590611a71575060128181548110611a4657611a46614c83565b60009182526020909120600260039092020101546001600160401b03600160581b9091048116908416105b15611a7c5792915050565b80611a8681614c99565b9150506119e4565b5060405163e82a532960e01b815260040160405180910390fd5b60006001600160a01b038216611ad1576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b611afe6130e2565b611b086000613704565b565b611b126130e2565b6012548710611b345760405163e82a532960e01b815260040160405180910390fd5b60018710611bbc57603c6012611b4b60018a614cb2565b81548110611b5b57611b5b614c83565b9060005260206000209060030201600201600b9054906101000a90046001600160401b0316611b8a9190614cc5565b6001600160401b0316826001600160401b03161015611bbc57604051636bc1af9360e01b815260040160405180910390fd5b611bc68282613756565b8560128881548110611bda57611bda614c83565b906000526020600020906003020160000160006101000a8154816001600160501b0302191690836001600160501b031602179055508460128881548110611c2357611c23614c83565b9060005260206000209060030201600001600a6101000a81548163ffffffff021916908363ffffffff1602179055508360128881548110611c6657611c66614c83565b9060005260206000209060030201600101819055508260128881548110611c8f57611c8f614c83565b906000526020600020906003020160020160006101000a81548162ffffff021916908362ffffff1602179055508160128881548110611cd057611cd0614c83565b906000526020600020906003020160020160036101000a8154816001600160401b0302191690836001600160401b031602179055508060128881548110611d1957611d19614c83565b9060005260206000209060030201600201600b6101000a8154816001600160401b0302191690836001600160401b031602179055507fb3268648542a1bb1b2dd12e3b14aeb5a3ab22c592de96bdd3e842154a5b394fa87878787878787604051611d899796959493929190614cec565b60405180910390a150505050505050565b60606000806000611daa85611aa8565b90506000816001600160401b03811115611dc657611dc66146e8565b604051908082528060200260200182016040528015611def578160200160208202803683370190505b509050611e1c60408051608081018252600080825260208201819052918101829052606081019190915290565b60005b838614611e9657611e2f81613788565b91508160400151611e8e5781516001600160a01b031615611e4f57815194505b876001600160a01b0316856001600160a01b031603611e8e5780838780600101985081518110611e8157611e81614c83565b6020026020010181815250505b600101611e1f565b50909695505050505050565b611eaa6130e2565b6012548110611ecc5760405163e82a532960e01b815260040160405180910390fd5b600c8190556040518181527f160d6de2c069c3adf7f4c1252236d0b325c0e3eb963ddb10c67a81aadf9a305890602001610edd565b611f096130e2565b60125460005b81811015611f84576012805480611f2857611f28614d3c565b60008281526020812060036000199093019283020180546001600160701b03191681556001810191909155600201805472ffffffffffffffffffffffffffffffffffffff19169055905580611f7c81614c99565b915050611f0f565b5060005b828110156123be576001811061203357603c8484611fa7600185614cb2565b818110611fb657611fb6614c83565b905060c0020160a0016020810190611fce91906144f8565b611fd89190614cc5565b6001600160401b0316848483818110611ff357611ff3614c83565b905060c00201608001602081019061200b91906144f8565b6001600160401b0316101561203357604051636bc1af9360e01b815260040160405180910390fd5b61208f84848381811061204857612048614c83565b905060c00201608001602081019061206091906144f8565b85858481811061207257612072614c83565b905060c0020160a001602081019061208a91906144f8565b613756565b60126040518060c001604052808686858181106120ae576120ae614c83565b6120c492602060c0909202019081019150614d52565b6001600160501b031681526020018686858181106120e4576120e4614c83565b905060c0020160200160208101906120fc9190614d6d565b63ffffffff16815260200186868581811061211957612119614c83565b905060c0020160400135815260200186868581811061213a5761213a614c83565b905060c0020160600160208101906121529190614d88565b62ffffff16815260200186868581811061216e5761216e614c83565b905060c00201608001602081019061218691906144f8565b6001600160401b031681526020018686858181106121a6576121a6614c83565b905060c0020160a00160208101906121be91906144f8565b6001600160401b039081169091528254600181810185556000948552602094859020845160039093020180549585015163ffffffff16600160501b026001600160701b03199096166001600160501b0390931692909217949094178155604083015193810193909355606082015160029093018054608084015160a0909401518316600160581b0267ffffffffffffffff60581b19949093166301000000026affffffffffffffffffffff1990911662ffffff9095169490941793909317919091161790557fb3268648542a1bb1b2dd12e3b14aeb5a3ab22c592de96bdd3e842154a5b394fa818585828181106122b7576122b7614c83565b6122cd92602060c0909202019081019150614d52565b8686858181106122df576122df614c83565b905060c0020160200160208101906122f79190614d6d565b87878681811061230957612309614c83565b905060c002016040013588888781811061232557612325614c83565b905060c00201606001602081019061233d9190614d88565b89898881811061234f5761234f614c83565b905060c00201608001602081019061236791906144f8565b8a8a8981811061237957612379614c83565b905060c0020160a001602081019061239191906144f8565b6040516123a49796959493929190614cec565b60405180910390a1806123b681614c99565b915050611f88565b50505050565b6123cc6130e2565b60155460ff16156123f05760405163463c963760e11b815260040160405180910390fd5b601554600160501b90046001600160401b0316421161242257604051638c15906560e01b815260040160405180910390fd5b601554610100900460ff161561244b5760405163a64907bf60e01b815260040160405180910390fd5b60178190556040518181527f4f5539c0409dfc4cb06f64cbd31237e1fbfe443f531584bf4dd77ec7fc5ba7b190602001610edd565b606060038054610f0d90614a13565b6001600160a01b038116600090815260056020526040808220546001600160401b03911c16610e7d565b6124c16130e2565b601180546001600160a01b0319166001600160a01b0383169081179091556040519081527ff477d93c015f2a73c2ccc5ed37078d12123b80fc5d12e0014c60b913bc1a1ec490602001610edd565b606081831061253157604051631960ccad60e11b815260040160405180910390fd5b60008061253d60005490565b90508084111561254b578093505b600061255687611aa8565b905084861015612575578585038181101561256f578091505b50612579565b5060005b6000816001600160401b03811115612593576125936146e8565b6040519080825280602002602001820160405280156125bc578160200160208202803683370190505b509050816000036125d257935061138492505050565b60006125dd88612a54565b9050600081604001516125ee575080515b885b8881141580156126005750848714155b156126755761260e81613788565b9250826040015161266d5782516001600160a01b03161561262e57825191505b8a6001600160a01b0316826001600160a01b03160361266d578084888060010199508151811061266057612660614c83565b6020026020010181815250505b6001016125f0565b505050928352509095945050505050565b600061269260196137c4565b905090565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526012546000908190841061277a5760405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964537461676560a01b604482015260640161118b565b60008481526013602090815260408083203384528252808320548784526014909252909120546012805463ffffffff90931692879081106127bd576127bd614c83565b60009182526020918290206040805160c08101825260039390930290910180546001600160501b0381168452600160501b900463ffffffff169383019390935260018301549082015260029091015462ffffff81166060830152630100000081046001600160401b039081166080840152600160581b9091041660a0820152969195509350915050565b61284f6130e2565b60005b818110156117845761288483838381811061286f5761286f614c83565b9050602002016020810190610c509190614112565b8061288e81614c99565b915050612852565b61289e6130e2565b60005b81811015611784576128d38383838181106128be576128be614c83565b9050602002016020810190610c1b9190614112565b806128dd81614c99565b9150506128a1565b6128ed6130e2565b600f611784828483614b95565b6129026130e2565b8163ffffffff16600d548161291a6001546000540390565b6129249190614da3565b11156129435760405163800113cb60e01b815260040160405180910390fd5b611784828463ffffffff166137ce565b6000601754600003612978576040516313a8ad7d60e11b815260040160405180910390fd5b6017546001600160a01b038316600090815260186020526040902054610e7d91906001600160d81b0316614db6565b6010546129cd9061010090046001600160a01b03166129c786868661124b565b836137e8565b6123be5760405162b7fad960e11b815260040160405180910390fd5b6060600f8054610f0d90614a13565b612a0384848461138b565b6001600160a01b0383163b156123be57612a1f8484848461392a565b6123be576040516368d2bf6b60e11b815260040160405180910390fd5b612a446130e2565b612a518161185b83610f90565b50565b6040805160808082018352600080835260208084018290528385018290526060808501839052855193840186528284529083018290529382018190529281018390529091506000548310612aa85792915050565b612ab183613788565b9050806040015115612ac35792915050565b61138483613a15565b6060612ad7826131f1565b612af457604051630a14c4b560e41b815260040160405180910390fd5b6000600b8054612b0390614a13565b80601f0160208091040260200160405190810160405280929190818152602001828054612b2f90614a13565b8015612b7c5780601f10612b5157610100808354040283529160200191612b7c565b820191906000526020600020905b815481529060010190602001808311612b5f57829003601f168201915b505050505090508051600003612ba15760405180602001604052806000815250611384565b80612bab84613a4a565b600f604051602001612bbf93929190614dca565b6040516020818303038152906040529392505050565b612bdd6130e2565b6017546000819003612c02576040516313a8ad7d60e11b815260040160405180910390fd5b6001600160a01b03821660009081526018602052604090208054600160f81b900460ff1615612c4457604051638246991960e01b815260040160405180910390fd5b80546001600160f81b038116600160f81b178255600090612c6f9084906001600160d81b0316614db6565b90506000846001600160a01b03168260405160006040518083038185875af1925050503d8060008114612cbe576040519150601f19603f3d011682016040523d82523d6000602084013e612cc3565b606091505b5050905080612ce5576040516312171d8360e31b815260040160405180910390fd5b5050505050565b60155460ff16612d0f57604051633123d42760e11b815260040160405180910390fd5b600260095403612d315760405162461bcd60e51b815260040161118b90614b18565b6002600955612d3f33613a8e565b6001600955565b612d4e6130e2565b600260095403612d705760405162461bcd60e51b815260040161118b90614b18565b6002600955612d7e81613a8e565b506001600955565b612d8e6130e2565b60168190556040518181527fd0f4420817917bede76c780c0ce000d6f59fb37194178cce2ad2c7fc09dddd4190602001610edd565b60155460009042620100009091046001600160401b031611801590612692575050601554600160501b90046001600160401b0316421090565b606080600080612e0c60196137c4565b905085612e198683614cb2565b811115612e2d57612e2a8683614cb2565b90505b6000816001600160401b03811115612e4757612e476146e8565b604051908082528060200260200182016040528015612e9257816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181612e655790505b5090506000826001600160401b03811115612eaf57612eaf6146e8565b604051908082528060200260200182016040528015612ed8578160200160208202803683370190505b50905060005b83811015612fb8576000612efd612ef58b84614da3565b601990613c11565b6001600160a01b038116600090815260186020908152604091829020825160608101845290546001600160d81b0381168252600160d81b810463ffffffff1692820192909252600160f81b90910460ff16151591810191909152855191925090859084908110612f6f57612f6f614c83565b602002602001018190525080838381518110612f8d57612f8d614c83565b6001600160a01b03909216602092830291909101909101525080612fb081614c99565b915050612ede565b509095509350909150509250925092565b600260095403612feb5760405162461bcd60e51b815260040161118b90614b18565b6002600955612fff86338787878787613294565b5050600160095550505050565b6130146130e2565b6001600160a01b0381166130795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161118b565b612a5181613704565b61308a6130e2565b600d548111156130ad5760405163430b83b160e11b815260040160405180910390fd5b600d8190556040518181527fc7bbc2b288fc13314546ea4aa51f6bcf71b7ba4740beeb3d32e9acef57b6668a90602001610edd565b6008546001600160a01b03163314611b085760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161118b565b6017546000819003613161576040516313a8ad7d60e11b815260040160405180910390fd5b6001600160a01b03831660009081526018602052604090208054600160d81b900463ffffffff166131928482614da3565b82549091506131ab9084906001600160d81b0316614a79565b8111156131cb57604051630958705d60e31b815260040160405180910390fd5b815463ffffffff60d81b1916600160d81b63ffffffff831602178255612ce58585613c1d565b6000805482108015610e7d575050600090815260046020526040902054600160e01b161590565b6000611384836001600160a01b038416613c93565b60008160005481101561327b5760008181526004602052604081205490600160e01b82169003613279575b80600003611384575060001901600081815260046020526040902054613258565b505b604051636f96cda160e11b815260040160405180910390fd5b600a5460ff166132b757604051630952c8a960e11b815260040160405180910390fd5b8663ffffffff16600d54816132cf6001546000540390565b6132d99190614da3565b11156132f85760405163800113cb60e01b815260040160405180910390fd5b600c54601254811061331d5760405163e82a532960e01b815260040160405180910390fd5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260105461010090046001600160a01b0316156133bc576133a7338b8888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506129a792505050565b6133b086613ce2565b6133b9866119e0565b91505b601282815481106133cf576133cf614c83565b60009182526020918290206040805160c081018252600390930290910180546001600160501b03811680855263ffffffff600160501b9092048216958501959095526001820154928401929092526002015462ffffff811660608401526001600160401b036301000000820481166080850152600160581b9091041660a083015290925061346091908c1690614e6a565b6001600160501b031634101561348957604051630717c22560e51b815260040160405180910390fd5b606081015162ffffff16156134e357606081015160008381526014602052604090205462ffffff909116906134c59063ffffffff8d1690614da3565b11156134e35760405162d0844960e21b815260040160405180910390fd5b600e541561354a57600e548a63ffffffff166135218b6001600160a01b03166000908152600560205260409081902054901c6001600160401b031690565b61352b9190614da3565b111561354a5760405163751304ed60e11b815260040160405180910390fd5b602081015163ffffffff16156135bc5760208082015160008481526013835260408082206001600160a01b038e168352909352919091205463ffffffff91821691613597918d9116614e95565b63ffffffff1611156135bc5760405163b4f3729b60e01b815260040160405180910390fd5b6040810151156136635780604001516136458989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060405161362a92508e915060200160609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405280519060200120613d40565b14613663576040516309bde33960e01b815260040160405180910390fd5b60008281526013602090815260408083206001600160a01b038d168452909152812080548c929061369b90849063ffffffff16614e95565b92506101000a81548163ffffffff021916908363ffffffff1602179055508963ffffffff166014600084815260200190815260200160002060008282546136e29190614da3565b909155506136f890508963ffffffff8c166137ce565b50505050505050505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b806001600160401b0316826001600160401b031610610efa57604051631750215560e11b815260040160405180910390fd5b604080516080810182526000808252602082018190529181018290526060810191909152600082815260046020526040902054610e7d90613d8d565b6000610e7d825490565b610efa828260405180602001604052806000815250613dd4565b60008060006137f78585613e3a565b9092509050600081600481111561381057613810614eb2565b14801561382e5750856001600160a01b0316826001600160a01b0316145b1561383e57600192505050611384565b600080876001600160a01b0316631626ba7e60e01b8888604051602401613866929190614ec8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516138a49190614ee1565b600060405180830381855afa9150503d80600081146138df576040519150601f19603f3d011682016040523d82523d6000602084013e6138e4565b606091505b50915091508180156138f7575080516020145b801561391e57508051630b135d3f60e11b9061391c9083016020908101908401614efd565b145b98975050505050505050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061395f903390899088908890600401614f16565b6020604051808303816000875af192505050801561399a575060408051601f3d908101601f1916820190925261399791810190614f53565b60015b6139f8573d8080156139c8576040519150601f19603f3d011682016040523d82523d6000602084013e6139cd565b606091505b5080516000036139f0576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b604080516080810182526000808252602082018190529181018290526060810191909152610e7d613a458361322d565b613d8d565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a900480613a645750819003601f19909101908152919050565b6017546000819003613ab3576040516313a8ad7d60e11b815260040160405180910390fd5b6001600160a01b038216600090815260186020526040902080546001600160d81b03811690600160f81b900460ff1615613b0057604051638246991960e01b815260040160405180910390fd5b81546001600160f81b038116600160f81b178355600090613b2b9085906001600160d81b0316614db6565b90506000856001600160a01b03168260405160006040518083038185875af1925050503d8060008114613b7a576040519150601f19603f3d011682016040523d82523d6000602084013e613b7f565b606091505b5050905080613ba1576040516312171d8360e31b815260040160405180910390fd5b6000613bad8685614a79565b90508015613c08578454600160d81b900463ffffffff1615613be257604051632aeca36d60e11b815260040160405180910390fd5b845463ffffffff60d81b1916600160d81b63ffffffff831602178555613c088782613c1d565b50505050505050565b60006113848383613e7f565b80600d5481613c2f6001546000540390565b613c399190614da3565b1115613c585760405163800113cb60e01b815260040160405180910390fd5b613c6283836137ce565b601554610100900460ff16158015613c7a5750600082115b15611784576015805461ff001916610100179055505050565b6000818152600183016020526040812054613cda57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e7d565b506000610e7d565b6011546000906001600160a01b03163314613cfe57603c613d02565b61012c5b9050613d176001600160401b03821642614cb2565b826001600160401b03161015610efa576040516313634e8d60e11b815260040160405180910390fd5b600081815b8451811015613d8557613d7182868381518110613d6457613d64614c83565b6020026020010151613ea9565b915080613d7d81614c99565b915050613d45565b509392505050565b604080516080810182526001600160a01b038316815260a083901c6001600160401b03166020820152600160e01b831615159181019190915260e89190911c606082015290565b613dde8383613ed8565b6001600160a01b0383163b15611784576000548281035b613e08600086838060010194508661392a565b613e25576040516368d2bf6b60e11b815260040160405180910390fd5b818110613df5578160005414612ce557600080fd5b6000808251604103613e705760208301516040840151606085015160001a613e6487828585613fd6565b94509450505050613e78565b506000905060025b9250929050565b6000826000018281548110613e9657613e96614c83565b9060005260206000200154905092915050565b6000818310613ec5576000828152602084905260409020611384565b6000838152602083905260409020611384565b6000805490829003613efd5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b818114613fac57808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600101613f74565b5081600003613fcd57604051622e076360e81b815260040160405180910390fd5b60005550505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561400d57506000905060036140ba565b8460ff16601b1415801561402557508460ff16601c14155b1561403657506000905060046140ba565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561408a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166140b3576000600192509250506140ba565b9150600090505b94509492505050565b6001600160e01b031981168114612a5157600080fd5b6000602082840312156140eb57600080fd5b8135611384816140c3565b80356001600160a01b038116811461410d57600080fd5b919050565b60006020828403121561412457600080fd5b611384826140f6565b6000806040838503121561414057600080fd5b614149836140f6565b946020939093013593505050565b60005b8381101561417257818101518382015260200161415a565b50506000910152565b60008151808452614193816020860160208601614157565b601f01601f19169290920160200192915050565b602081526000611384602083018461417b565b6000602082840312156141cc57600080fd5b5035919050565b803563ffffffff8116811461410d57600080fd5b80356001600160401b038116811461410d57600080fd5b60008060006060848603121561421357600080fd5b61421c846140f6565b925061422a602085016141d3565b9150614238604085016141e7565b90509250925092565b60008060006060848603121561425657600080fd5b61425f846140f6565b925061426d602085016140f6565b9150604084013590509250925092565b8035801515811461410d57600080fd5b60006020828403121561429f57600080fd5b6113848261427d565b600080604083850312156142bb57600080fd5b6142c4836141e7565b91506142d2602084016141e7565b90509250929050565b60008083601f8401126142ed57600080fd5b5081356001600160401b0381111561430457600080fd5b602083019150836020828501011115613e7857600080fd5b6000806020838503121561432f57600080fd5b82356001600160401b0381111561434557600080fd5b614351858286016142db565b90969095509350505050565b60008083601f84011261436f57600080fd5b5081356001600160401b0381111561438657600080fd5b6020830191508360208260051b8501011115613e7857600080fd5b600080602083850312156143b457600080fd5b82356001600160401b038111156143ca57600080fd5b6143518582860161435d565b80516001600160a01b031682526020808201516001600160401b03169083015260408082015115159083015260609081015162ffffff16910152565b6020808252825182820181905260009190848201906040850190845b81811015611e96576144418385516143d6565b928401926080929092019160010161442e565b600080600080600080600060a0888a03121561446f57600080fd5b614478886141d3565b9650614486602089016140f6565b955060408801356001600160401b03808211156144a257600080fd5b6144ae8b838c0161435d565b90975095508591506144c260608b016141e7565b945060808a01359150808211156144d857600080fd5b506144e58a828b016142db565b989b979a50959850939692959293505050565b60006020828403121561450a57600080fd5b611384826141e7565b80356001600160501b038116811461410d57600080fd5b803562ffffff8116811461410d57600080fd5b600080600080600080600060e0888a03121561455857600080fd5b8735965061456860208901614513565b9550614576604089016141d3565b94506060880135935061458b6080890161452a565b925061459960a089016141e7565b91506145a760c089016141e7565b905092959891949750929550565b6020808252825182820181905260009190848201906040850190845b81811015611e96578351835292840192918401916001016145d1565b6000806020838503121561460057600080fd5b82356001600160401b038082111561461757600080fd5b818501915085601f83011261462b57600080fd5b81358181111561463a57600080fd5b86602060c08302850101111561464f57600080fd5b60209290920196919550909350505050565b60008060006060848603121561467657600080fd5b61467f846140f6565b95602085013595506040909401359392505050565b600080604083850312156146a757600080fd5b6146b0836140f6565b91506142d26020840161427d565b600080604083850312156146d157600080fd5b6146da836141d3565b91506142d2602084016140f6565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261470f57600080fd5b81356001600160401b0380821115614729576147296146e8565b604051601f8301601f19908116603f01168101908282118183101715614751576147516146e8565b8160405283815286602085880101111561476a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156147a057600080fd5b6147a9856140f6565b93506147b7602086016141d3565b92506147c5604086016141e7565b915060608501356001600160401b038111156147e057600080fd5b6147ec878288016146fe565b91505092959194509250565b6000806000806080858703121561480e57600080fd5b614817856140f6565b9350614825602086016140f6565b92506040850135915060608501356001600160401b038111156147e057600080fd5b60808101610e7d82846143d6565b6000806040838503121561486857600080fd5b6146da836140f6565b6000806040838503121561488457600080fd5b50508035926020909101359150565b60608082528451828201819052600091906020906080850190828901855b828110156148f9576148e984835180516001600160d81b0316825260208082015163ffffffff16908301526040908101511515910152565b92850192908401906001016148b1565b50505084810382860152865180825290820192508682019060005b818110156149395782516001600160a01b031685529383019391830191600101614914565b50505050604092909201929092529392505050565b6000806000806000806080878903121561496757600080fd5b614970876141d3565b955060208701356001600160401b038082111561498c57600080fd5b6149988a838b0161435d565b90975095508591506149ac60408a016141e7565b945060608901359150808211156149c257600080fd5b506149cf89828a016142db565b979a9699509497509295939492505050565b81516001600160d81b0316815260208083015163ffffffff169082015260408083015115159082015260608101610e7d565b600181811c90821680614a2757607f821691505b602082108103614a4757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082614a8857614a88614a4d565b500490565b6000602080835260008454614aa181614a13565b80848701526040600180841660008114614ac25760018114614adc57614b0a565b60ff1985168984015283151560051b890183019550614b0a565b896000528660002060005b85811015614b025781548b8201860152908301908801614ae7565b8a0184019650505b509398975050505050505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b601f82111561178457600081815260208120601f850160051c81016020861015614b765750805b601f850160051c820191505b8181101561151c57828155600101614b82565b6001600160401b03831115614bac57614bac6146e8565b614bc083614bba8354614a13565b83614b4f565b6000601f841160018114614bf45760008515614bdc5750838201355b600019600387901b1c1916600186901b178355612ce5565b600083815260209020601f19861690835b82811015614c255786850135825560209485019460019092019101614c05565b5086821015614c425760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b600060018201614cab57614cab614a63565b5060010190565b81810381811115610e7d57610e7d614a63565b6001600160401b03818116838216019080821115614ce557614ce5614a63565b5092915050565b9687526001600160501b0395909516602087015263ffffffff939093166040860152606085019190915262ffffff1660808401526001600160401b0390811660a08401521660c082015260e00190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215614d6457600080fd5b61138482614513565b600060208284031215614d7f57600080fd5b611384826141d3565b600060208284031215614d9a57600080fd5b6113848261452a565b80820180821115610e7d57610e7d614a63565b600082614dc557614dc5614a4d565b500690565b600084516020614ddd8285838a01614157565b855191840191614df08184848a01614157565b8554920191600090614e0181614a13565b60018281168015614e195760018114614e2e57614e5a565b60ff1984168752821515830287019450614e5a565b896000528560002060005b84811015614e5257815489820152908301908701614e39565b505082870194505b50929a9950505050505050505050565b6001600160501b03818116838216028082169190828114614e8d57614e8d614a63565b505092915050565b63ffffffff818116838216019080821115614ce557614ce5614a63565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000611381604083018461417b565b60008251614ef3818460208701614157565b9190910192915050565b600060208284031215614f0f57600080fd5b5051919050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614f499083018461417b565b9695505050505050565b600060208284031215614f6557600080fd5b8151611384816140c356fea264697066735822122090333c8818cbda7dbeb44f204bc3f4d9b64cedb6c8ad4bc559b664017da3394964736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106104475760003560e01c80638f93151111610234578063b7a9fa601161012e578063e985e9c5116100b6578063efdaa2ec1161007a578063efdaa2ec14610d2d578063f2fde38b14610d42578063f698bceb14610d62578063f8d0969614610d7a578063ffc9896b14610d9a57600080fd5b8063e985e9c514610c75578063e9d7c06814610cbe578063ed2e2b0214610cd3578063ee28b74414610d02578063efb6b11f14610d1a57600080fd5b8063c87b56dd116100fd578063c87b56dd14610be0578063cae4d67614610c00578063d956634f14610c20578063db422e0b14610c35578063dba3e70414610c5557600080fd5b8063b7a9fa6014610b6b578063b88d4fde14610b80578063c02bd9a514610b93578063c23dc68f14610bb357600080fd5b8063a06c492f116101bc578063a718cd4e11610180578063a718cd4e14610acb578063a9852bfb14610aeb578063aac5ab1f14610b0b578063acde5d2814610b2b578063b50248e714610b4b57600080fd5b8063a06c492f1461092b578063a22cb465146109ca578063a3759f60146109ea578063a466cb1a14610a86578063a6239bb814610aa657600080fd5b806398d5fdca1161020357806398d5fdca1461094b578063997556241461096057806399a2557a146109805780639a3814ab146109a05780639be572f6146109b557600080fd5b80638f931511146108d857806391b7f5ed146108f657806395d89b411461091657806397cf84fc1461092b57600080fd5b80633ccfd60b1161034557806370a08231116102cd5780638462151c116102915780638462151c14610838578063896086de146108655780638bcccb63146108855780638da5cb5b1461089a5780638dcdb09d146108b857600080fd5b806370a08231146107b957806370da24ee146107d9578063715018a6146107ee57806373e1607e1461080357806374d186621461082357600080fd5b80635b910336116103145780635b910336146107195780635bbb21771461073957806362acbd9a146107665780636352211e1461077957806367808a341461079957600080fd5b80633ccfd60b146106bc57806342842e0e146106d15780634b1c53b4146106e457806355f804b3146106f957600080fd5b806318160ddd116103d3578063285d70d411610397578063285d70d41461061957806333bbbf0614610639578063372992e41461065c578063378c93ad1461067c578063379a02061461069c57600080fd5b806318160ddd146105a15780631998aeef146105ba5780631ce03eed146105c2578063217d6988146105e257806323b872dd1461060657600080fd5b8063074ba79d1161041a578063074ba79d146104e5578063081812fc14610513578063095ea7b31461054b5780631053a8151461055e578063174f909c1461057357600080fd5b806301ffc9a71461044c578063020451381461048157806305ab421d146104a357806306fdde03146104c3575b600080fd5b34801561045857600080fd5b5061046c6104673660046140d9565b610e31565b60405190151581526020015b60405180910390f35b34801561048d57600080fd5b506104a161049c366004614112565b610e83565b005b3480156104af57600080fd5b506104a16104be36600461412d565b610ee8565b3480156104cf57600080fd5b506104d8610efe565b60405161047891906141a7565b3480156104f157600080fd5b50610505610500366004614112565b610f90565b604051908152602001610478565b34801561051f57600080fd5b5061053361052e3660046141ba565b610fe4565b6040516001600160a01b039091168152602001610478565b6104a161055936600461412d565b611028565b34801561056a57600080fd5b506104a16110c8565b34801561057f57600080fd5b5061058961012c81565b6040516001600160401b039091168152602001610478565b3480156105ad57600080fd5b5060015460005403610505565b6104a1611118565b3480156105ce57600080fd5b506105056105dd3660046141fe565b61124b565b3480156105ee57600080fd5b506015546201000090046001600160401b0316610589565b6104a1610614366004614241565b61138b565b34801561062557600080fd5b506104a161063436600461428d565b611524565b34801561064557600080fd5b5060105461010090046001600160a01b0316610533565b34801561066857600080fd5b506104a16106773660046141ba565b61156d565b34801561068857600080fd5b506104a161069736600461428d565b6115cd565b3480156106a857600080fd5b506104a16106b73660046142a8565b611616565b3480156106c857600080fd5b506104a16116be565b6104a16106df366004614241565b611769565b3480156106f057600080fd5b50600d54610505565b34801561070557600080fd5b506104a161071436600461431c565b611789565b34801561072557600080fd5b506104a16107343660046143a1565b6117f4565b34801561074557600080fd5b506107596107543660046143a1565b611872565b6040516104789190614412565b6104a1610774366004614454565b61193d565b34801561078557600080fd5b506105336107943660046141ba565b6119d5565b3480156107a557600080fd5b506105056107b43660046144f8565b6119e0565b3480156107c557600080fd5b506105056107d4366004614112565b611aa8565b3480156107e557600080fd5b50601254610505565b3480156107fa57600080fd5b506104a1611af6565b34801561080f57600080fd5b506104a161081e36600461453d565b611b0a565b34801561082f57600080fd5b50610589603c81565b34801561084457600080fd5b50610858610853366004614112565b611d9a565b60405161047891906145b5565b34801561087157600080fd5b506104a16108803660046141ba565b611ea2565b34801561089157600080fd5b50601654610505565b3480156108a657600080fd5b506008546001600160a01b0316610533565b3480156108c457600080fd5b506104a16108d33660046145ed565b611f01565b3480156108e457600080fd5b506011546001600160a01b0316610533565b34801561090257600080fd5b506104a16109113660046141ba565b6123c4565b34801561092257600080fd5b506104d8612480565b34801561093757600080fd5b50610505610946366004614112565b61248f565b34801561095757600080fd5b50601754610505565b34801561096c57600080fd5b506104a161097b366004614112565b6124b9565b34801561098c57600080fd5b5061085861099b366004614661565b61250f565b3480156109ac57600080fd5b50600c54610505565b3480156109c157600080fd5b50610505612686565b3480156109d657600080fd5b506104a16109e5366004614694565b612697565b3480156109f657600080fd5b50610a0a610a053660046141ba565b612703565b6040805184516001600160501b0316815260208086015163ffffffff90811691830191909152858301519282019290925260608086015162ffffff16908201526080808601516001600160401b039081169183019190915260a095860151169481019490945290911660c083015260e082015261010001610478565b348015610a9257600080fd5b506104a1610aa13660046143a1565b612847565b348015610ab257600080fd5b50601554600160501b90046001600160401b0316610589565b348015610ad757600080fd5b506104a1610ae63660046143a1565b612896565b348015610af757600080fd5b506104a1610b0636600461431c565b6128e5565b348015610b1757600080fd5b506104a1610b263660046146be565b6128fa565b348015610b3757600080fd5b50610505610b46366004614112565b612953565b348015610b5757600080fd5b506104a1610b6636600461478a565b6129a7565b348015610b7757600080fd5b506104d86129e9565b6104a1610b8e3660046147f8565b6129f8565b348015610b9f57600080fd5b506104a1610bae366004614112565b612a3c565b348015610bbf57600080fd5b50610bd3610bce3660046141ba565b612a54565b6040516104789190614847565b348015610bec57600080fd5b506104d8610bfb3660046141ba565b612acc565b348015610c0c57600080fd5b506104a1610c1b366004614112565b612bd5565b348015610c2c57600080fd5b506104a1612cec565b348015610c4157600080fd5b506104a1610c50366004614112565b612d46565b348015610c6157600080fd5b506104a1610c703660046141ba565b612d86565b348015610c8157600080fd5b5061046c610c90366004614855565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b348015610cca57600080fd5b5061046c612dc3565b348015610cdf57600080fd5b50610cf3610cee366004614871565b612dfc565b60405161047893929190614893565b348015610d0e57600080fd5b5060155460ff1661046c565b6104a1610d2836600461494e565b612fc9565b348015610d3957600080fd5b50600e54610505565b348015610d4e57600080fd5b506104a1610d5d366004614112565b61300c565b348015610d6e57600080fd5b50600a5460ff1661046c565b348015610d8657600080fd5b506104a1610d953660046141ba565b613082565b348015610da657600080fd5b50610e24610db5366004614112565b6040805160608082018352600080835260208084018290529284018190526001600160a01b03949094168452601882529282902082519384018352546001600160d81b0381168452600160d81b810463ffffffff1691840191909152600160f81b900460ff1615159082015290565b60405161047891906149e1565b60006301ffc9a760e01b6001600160e01b031983161480610e6257506380ac58cd60e01b6001600160e01b03198316145b80610e7d5750635b5e139f60e01b6001600160e01b03198316145b92915050565b610e8b6130e2565b60108054610100600160a81b0319166101006001600160a01b038416908102919091179091556040519081527faea1573caf7b4fdd079b947d86c1be6c725642c47582f8f9bd2c7d2a30bf0bd9906020015b60405180910390a150565b610ef06130e2565b610efa828261313c565b5050565b606060028054610f0d90614a13565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3990614a13565b8015610f865780601f10610f5b57610100808354040283529160200191610f86565b820191906000526020600020905b815481529060010190602001808311610f6957829003601f168201915b5050505050905090565b6000601754600003610fb5576040516313a8ad7d60e11b815260040160405180910390fd5b6017546001600160a01b038316600090815260186020526040902054610e7d91906001600160d81b0316614a79565b6000610fef826131f1565b61100c576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b6000611033826119d5565b9050336001600160a01b0382161461106c5761104f8133610c90565b61106c576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6110d06130e2565b6010805460ff191660011790556040517fc6a6c2b165e62c9d37fc51a18ed76e5be22304bc1d337877c98f31c23e40b0f59061110e90600b90614a8d565b60405180910390a1565b60155442620100009091046001600160401b0316118061114b575060155442600160501b9091046001600160401b031611155b15611169576040516307d6617160e31b815260040160405180910390fd5b6002600954036111945760405162461bcd60e51b815260040161118b90614b18565b60405180910390fd5b600260095533600090815260186020526040902080546016546001600160d81b039091163401908110156111db5760405163dd828e1560e01b815260040160405180910390fd5b81546001600160d81b0319166001600160d81b0382161782556111ff601933613218565b5060408051348152602081018390524781830152905133917f4dcc013473324698bfbe263facec4ea4b1bc43624236542deabec62c2122b305919081900360600190a250506001600955565b60105460009061010090046001600160a01b031661127c576040516353bd4fb360e11b815260040160405180910390fd5b611381308585601060019054906101000a90046001600160a01b0316866112a04690565b6112a98b61248f565b604051606097881b6bffffffffffffffffffffffff19908116602083015296881b8716603482015260e09590951b6001600160e01b031916604886015292861b909416604c84015260c01b6001600160c01b031916938201939093526068810191909152608881019190915260a801604051602081830303815290604052805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90505b9392505050565b60006113968261322d565b9050836001600160a01b0316816001600160a01b0316146113c95760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b03881690911417611416576113f98633610c90565b61141657604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03851661143d57604051633a954ecd60e21b815260040160405180910390fd5b801561144857600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040812091909155600160e11b841690036114da576001840160008181526004602052604081205490036114d85760005481146114d85760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b505050505050565b61152c6130e2565b600a805460ff19168215159081179091556040519081527fe717a2bfc51e250b028aaac5eb448e76f4df26b9609956782bff49097bb792cf90602001610edd565b6115756130e2565b600d5481111561159857604051630590c51360e01b815260040160405180910390fd5b600e8190556040518181527f5307de8ad7d34d5ddfd5171435c143bdc645493980f453eb5d7cdb3e494a1b3590602001610edd565b6115d56130e2565b6015805460ff19168215159081179091556040519081527f18d99b89a15641fa45e09c4916c435eb2bee98b29a0157c251869471e0cf28c990602001610edd565b61161e6130e2565b6017541561163f57604051632b67583760e21b815260040160405180910390fd5b816001600160401b0316816001600160401b03161161167157604051631750215560e11b815260040160405180910390fd5b6015805471ffffffffffffffffffffffffffffffff00001916620100006001600160401b039485160267ffffffffffffffff60501b191617600160501b9290931691909102919091179055565b6116c66130e2565b6040514790600090339083908381818185875af1925050503d806000811461170a576040519150601f19603f3d011682016040523d82523d6000602084013e61170f565b606091505b505090508061173157604051631d42c86760e21b815260040160405180910390fd5b6040518281527f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d906020015b60405180910390a15050565b611784838383604051806020016040528060008152506129f8565b505050565b6117916130e2565b60105460ff16156117b5576040516306ccad4160e41b815260040160405180910390fd5b600b6117c2828483614b95565b507f23c8c9488efebfd474e85a7956de6f39b17c7ab88502d42a623db2d8e382bbaa828260405161175d929190614c54565b6117fc6130e2565b60005b818110156117845761186083838381811061181c5761181c614c83565b90506020020160208101906118319190614112565b61185b85858581811061184657611846614c83565b90506020020160208101906105009190614112565b61313c565b8061186a81614c99565b9150506117ff565b6060816000816001600160401b0381111561188f5761188f6146e8565b6040519080825280602002602001820160405280156118e157816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816118ad5790505b50905060005b8281146119345761190f86868381811061190357611903614c83565b90506020020135612a54565b82828151811061192157611921614c83565b60209081029190910101526001016118e7565b50949350505050565b60026009540361195f5760405162461bcd60e51b815260040161118b90614b18565b60026009556011546001600160a01b031661198d57604051637e9f68eb60e11b815260040160405180910390fd5b6011546001600160a01b031633146119b85760405163f46fd68360e01b815260040160405180910390fd5b6119c787878787878787613294565b505060016009555050505050565b6000610e7d8261322d565b6000805b601254811015611a8e5760128181548110611a0157611a01614c83565b60009182526020909120600260039092020101546001600160401b036301000000909104811690841610801590611a71575060128181548110611a4657611a46614c83565b60009182526020909120600260039092020101546001600160401b03600160581b9091048116908416105b15611a7c5792915050565b80611a8681614c99565b9150506119e4565b5060405163e82a532960e01b815260040160405180910390fd5b60006001600160a01b038216611ad1576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b611afe6130e2565b611b086000613704565b565b611b126130e2565b6012548710611b345760405163e82a532960e01b815260040160405180910390fd5b60018710611bbc57603c6012611b4b60018a614cb2565b81548110611b5b57611b5b614c83565b9060005260206000209060030201600201600b9054906101000a90046001600160401b0316611b8a9190614cc5565b6001600160401b0316826001600160401b03161015611bbc57604051636bc1af9360e01b815260040160405180910390fd5b611bc68282613756565b8560128881548110611bda57611bda614c83565b906000526020600020906003020160000160006101000a8154816001600160501b0302191690836001600160501b031602179055508460128881548110611c2357611c23614c83565b9060005260206000209060030201600001600a6101000a81548163ffffffff021916908363ffffffff1602179055508360128881548110611c6657611c66614c83565b9060005260206000209060030201600101819055508260128881548110611c8f57611c8f614c83565b906000526020600020906003020160020160006101000a81548162ffffff021916908362ffffff1602179055508160128881548110611cd057611cd0614c83565b906000526020600020906003020160020160036101000a8154816001600160401b0302191690836001600160401b031602179055508060128881548110611d1957611d19614c83565b9060005260206000209060030201600201600b6101000a8154816001600160401b0302191690836001600160401b031602179055507fb3268648542a1bb1b2dd12e3b14aeb5a3ab22c592de96bdd3e842154a5b394fa87878787878787604051611d899796959493929190614cec565b60405180910390a150505050505050565b60606000806000611daa85611aa8565b90506000816001600160401b03811115611dc657611dc66146e8565b604051908082528060200260200182016040528015611def578160200160208202803683370190505b509050611e1c60408051608081018252600080825260208201819052918101829052606081019190915290565b60005b838614611e9657611e2f81613788565b91508160400151611e8e5781516001600160a01b031615611e4f57815194505b876001600160a01b0316856001600160a01b031603611e8e5780838780600101985081518110611e8157611e81614c83565b6020026020010181815250505b600101611e1f565b50909695505050505050565b611eaa6130e2565b6012548110611ecc5760405163e82a532960e01b815260040160405180910390fd5b600c8190556040518181527f160d6de2c069c3adf7f4c1252236d0b325c0e3eb963ddb10c67a81aadf9a305890602001610edd565b611f096130e2565b60125460005b81811015611f84576012805480611f2857611f28614d3c565b60008281526020812060036000199093019283020180546001600160701b03191681556001810191909155600201805472ffffffffffffffffffffffffffffffffffffff19169055905580611f7c81614c99565b915050611f0f565b5060005b828110156123be576001811061203357603c8484611fa7600185614cb2565b818110611fb657611fb6614c83565b905060c0020160a0016020810190611fce91906144f8565b611fd89190614cc5565b6001600160401b0316848483818110611ff357611ff3614c83565b905060c00201608001602081019061200b91906144f8565b6001600160401b0316101561203357604051636bc1af9360e01b815260040160405180910390fd5b61208f84848381811061204857612048614c83565b905060c00201608001602081019061206091906144f8565b85858481811061207257612072614c83565b905060c0020160a001602081019061208a91906144f8565b613756565b60126040518060c001604052808686858181106120ae576120ae614c83565b6120c492602060c0909202019081019150614d52565b6001600160501b031681526020018686858181106120e4576120e4614c83565b905060c0020160200160208101906120fc9190614d6d565b63ffffffff16815260200186868581811061211957612119614c83565b905060c0020160400135815260200186868581811061213a5761213a614c83565b905060c0020160600160208101906121529190614d88565b62ffffff16815260200186868581811061216e5761216e614c83565b905060c00201608001602081019061218691906144f8565b6001600160401b031681526020018686858181106121a6576121a6614c83565b905060c0020160a00160208101906121be91906144f8565b6001600160401b039081169091528254600181810185556000948552602094859020845160039093020180549585015163ffffffff16600160501b026001600160701b03199096166001600160501b0390931692909217949094178155604083015193810193909355606082015160029093018054608084015160a0909401518316600160581b0267ffffffffffffffff60581b19949093166301000000026affffffffffffffffffffff1990911662ffffff9095169490941793909317919091161790557fb3268648542a1bb1b2dd12e3b14aeb5a3ab22c592de96bdd3e842154a5b394fa818585828181106122b7576122b7614c83565b6122cd92602060c0909202019081019150614d52565b8686858181106122df576122df614c83565b905060c0020160200160208101906122f79190614d6d565b87878681811061230957612309614c83565b905060c002016040013588888781811061232557612325614c83565b905060c00201606001602081019061233d9190614d88565b89898881811061234f5761234f614c83565b905060c00201608001602081019061236791906144f8565b8a8a8981811061237957612379614c83565b905060c0020160a001602081019061239191906144f8565b6040516123a49796959493929190614cec565b60405180910390a1806123b681614c99565b915050611f88565b50505050565b6123cc6130e2565b60155460ff16156123f05760405163463c963760e11b815260040160405180910390fd5b601554600160501b90046001600160401b0316421161242257604051638c15906560e01b815260040160405180910390fd5b601554610100900460ff161561244b5760405163a64907bf60e01b815260040160405180910390fd5b60178190556040518181527f4f5539c0409dfc4cb06f64cbd31237e1fbfe443f531584bf4dd77ec7fc5ba7b190602001610edd565b606060038054610f0d90614a13565b6001600160a01b038116600090815260056020526040808220546001600160401b03911c16610e7d565b6124c16130e2565b601180546001600160a01b0319166001600160a01b0383169081179091556040519081527ff477d93c015f2a73c2ccc5ed37078d12123b80fc5d12e0014c60b913bc1a1ec490602001610edd565b606081831061253157604051631960ccad60e11b815260040160405180910390fd5b60008061253d60005490565b90508084111561254b578093505b600061255687611aa8565b905084861015612575578585038181101561256f578091505b50612579565b5060005b6000816001600160401b03811115612593576125936146e8565b6040519080825280602002602001820160405280156125bc578160200160208202803683370190505b509050816000036125d257935061138492505050565b60006125dd88612a54565b9050600081604001516125ee575080515b885b8881141580156126005750848714155b156126755761260e81613788565b9250826040015161266d5782516001600160a01b03161561262e57825191505b8a6001600160a01b0316826001600160a01b03160361266d578084888060010199508151811061266057612660614c83565b6020026020010181815250505b6001016125f0565b505050928352509095945050505050565b600061269260196137c4565b905090565b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091526012546000908190841061277a5760405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964537461676560a01b604482015260640161118b565b60008481526013602090815260408083203384528252808320548784526014909252909120546012805463ffffffff90931692879081106127bd576127bd614c83565b60009182526020918290206040805160c08101825260039390930290910180546001600160501b0381168452600160501b900463ffffffff169383019390935260018301549082015260029091015462ffffff81166060830152630100000081046001600160401b039081166080840152600160581b9091041660a0820152969195509350915050565b61284f6130e2565b60005b818110156117845761288483838381811061286f5761286f614c83565b9050602002016020810190610c509190614112565b8061288e81614c99565b915050612852565b61289e6130e2565b60005b81811015611784576128d38383838181106128be576128be614c83565b9050602002016020810190610c1b9190614112565b806128dd81614c99565b9150506128a1565b6128ed6130e2565b600f611784828483614b95565b6129026130e2565b8163ffffffff16600d548161291a6001546000540390565b6129249190614da3565b11156129435760405163800113cb60e01b815260040160405180910390fd5b611784828463ffffffff166137ce565b6000601754600003612978576040516313a8ad7d60e11b815260040160405180910390fd5b6017546001600160a01b038316600090815260186020526040902054610e7d91906001600160d81b0316614db6565b6010546129cd9061010090046001600160a01b03166129c786868661124b565b836137e8565b6123be5760405162b7fad960e11b815260040160405180910390fd5b6060600f8054610f0d90614a13565b612a0384848461138b565b6001600160a01b0383163b156123be57612a1f8484848461392a565b6123be576040516368d2bf6b60e11b815260040160405180910390fd5b612a446130e2565b612a518161185b83610f90565b50565b6040805160808082018352600080835260208084018290528385018290526060808501839052855193840186528284529083018290529382018190529281018390529091506000548310612aa85792915050565b612ab183613788565b9050806040015115612ac35792915050565b61138483613a15565b6060612ad7826131f1565b612af457604051630a14c4b560e41b815260040160405180910390fd5b6000600b8054612b0390614a13565b80601f0160208091040260200160405190810160405280929190818152602001828054612b2f90614a13565b8015612b7c5780601f10612b5157610100808354040283529160200191612b7c565b820191906000526020600020905b815481529060010190602001808311612b5f57829003601f168201915b505050505090508051600003612ba15760405180602001604052806000815250611384565b80612bab84613a4a565b600f604051602001612bbf93929190614dca565b6040516020818303038152906040529392505050565b612bdd6130e2565b6017546000819003612c02576040516313a8ad7d60e11b815260040160405180910390fd5b6001600160a01b03821660009081526018602052604090208054600160f81b900460ff1615612c4457604051638246991960e01b815260040160405180910390fd5b80546001600160f81b038116600160f81b178255600090612c6f9084906001600160d81b0316614db6565b90506000846001600160a01b03168260405160006040518083038185875af1925050503d8060008114612cbe576040519150601f19603f3d011682016040523d82523d6000602084013e612cc3565b606091505b5050905080612ce5576040516312171d8360e31b815260040160405180910390fd5b5050505050565b60155460ff16612d0f57604051633123d42760e11b815260040160405180910390fd5b600260095403612d315760405162461bcd60e51b815260040161118b90614b18565b6002600955612d3f33613a8e565b6001600955565b612d4e6130e2565b600260095403612d705760405162461bcd60e51b815260040161118b90614b18565b6002600955612d7e81613a8e565b506001600955565b612d8e6130e2565b60168190556040518181527fd0f4420817917bede76c780c0ce000d6f59fb37194178cce2ad2c7fc09dddd4190602001610edd565b60155460009042620100009091046001600160401b031611801590612692575050601554600160501b90046001600160401b0316421090565b606080600080612e0c60196137c4565b905085612e198683614cb2565b811115612e2d57612e2a8683614cb2565b90505b6000816001600160401b03811115612e4757612e476146e8565b604051908082528060200260200182016040528015612e9257816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181612e655790505b5090506000826001600160401b03811115612eaf57612eaf6146e8565b604051908082528060200260200182016040528015612ed8578160200160208202803683370190505b50905060005b83811015612fb8576000612efd612ef58b84614da3565b601990613c11565b6001600160a01b038116600090815260186020908152604091829020825160608101845290546001600160d81b0381168252600160d81b810463ffffffff1692820192909252600160f81b90910460ff16151591810191909152855191925090859084908110612f6f57612f6f614c83565b602002602001018190525080838381518110612f8d57612f8d614c83565b6001600160a01b03909216602092830291909101909101525080612fb081614c99565b915050612ede565b509095509350909150509250925092565b600260095403612feb5760405162461bcd60e51b815260040161118b90614b18565b6002600955612fff86338787878787613294565b5050600160095550505050565b6130146130e2565b6001600160a01b0381166130795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161118b565b612a5181613704565b61308a6130e2565b600d548111156130ad5760405163430b83b160e11b815260040160405180910390fd5b600d8190556040518181527fc7bbc2b288fc13314546ea4aa51f6bcf71b7ba4740beeb3d32e9acef57b6668a90602001610edd565b6008546001600160a01b03163314611b085760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161118b565b6017546000819003613161576040516313a8ad7d60e11b815260040160405180910390fd5b6001600160a01b03831660009081526018602052604090208054600160d81b900463ffffffff166131928482614da3565b82549091506131ab9084906001600160d81b0316614a79565b8111156131cb57604051630958705d60e31b815260040160405180910390fd5b815463ffffffff60d81b1916600160d81b63ffffffff831602178255612ce58585613c1d565b6000805482108015610e7d575050600090815260046020526040902054600160e01b161590565b6000611384836001600160a01b038416613c93565b60008160005481101561327b5760008181526004602052604081205490600160e01b82169003613279575b80600003611384575060001901600081815260046020526040902054613258565b505b604051636f96cda160e11b815260040160405180910390fd5b600a5460ff166132b757604051630952c8a960e11b815260040160405180910390fd5b8663ffffffff16600d54816132cf6001546000540390565b6132d99190614da3565b11156132f85760405163800113cb60e01b815260040160405180910390fd5b600c54601254811061331d5760405163e82a532960e01b815260040160405180910390fd5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915260105461010090046001600160a01b0316156133bc576133a7338b8888888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506129a792505050565b6133b086613ce2565b6133b9866119e0565b91505b601282815481106133cf576133cf614c83565b60009182526020918290206040805160c081018252600390930290910180546001600160501b03811680855263ffffffff600160501b9092048216958501959095526001820154928401929092526002015462ffffff811660608401526001600160401b036301000000820481166080850152600160581b9091041660a083015290925061346091908c1690614e6a565b6001600160501b031634101561348957604051630717c22560e51b815260040160405180910390fd5b606081015162ffffff16156134e357606081015160008381526014602052604090205462ffffff909116906134c59063ffffffff8d1690614da3565b11156134e35760405162d0844960e21b815260040160405180910390fd5b600e541561354a57600e548a63ffffffff166135218b6001600160a01b03166000908152600560205260409081902054901c6001600160401b031690565b61352b9190614da3565b111561354a5760405163751304ed60e11b815260040160405180910390fd5b602081015163ffffffff16156135bc5760208082015160008481526013835260408082206001600160a01b038e168352909352919091205463ffffffff91821691613597918d9116614e95565b63ffffffff1611156135bc5760405163b4f3729b60e01b815260040160405180910390fd5b6040810151156136635780604001516136458989808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060405161362a92508e915060200160609190911b6bffffffffffffffffffffffff1916815260140190565b60405160208183030381529060405280519060200120613d40565b14613663576040516309bde33960e01b815260040160405180910390fd5b60008281526013602090815260408083206001600160a01b038d168452909152812080548c929061369b90849063ffffffff16614e95565b92506101000a81548163ffffffff021916908363ffffffff1602179055508963ffffffff166014600084815260200190815260200160002060008282546136e29190614da3565b909155506136f890508963ffffffff8c166137ce565b50505050505050505050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b806001600160401b0316826001600160401b031610610efa57604051631750215560e11b815260040160405180910390fd5b604080516080810182526000808252602082018190529181018290526060810191909152600082815260046020526040902054610e7d90613d8d565b6000610e7d825490565b610efa828260405180602001604052806000815250613dd4565b60008060006137f78585613e3a565b9092509050600081600481111561381057613810614eb2565b14801561382e5750856001600160a01b0316826001600160a01b0316145b1561383e57600192505050611384565b600080876001600160a01b0316631626ba7e60e01b8888604051602401613866929190614ec8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516138a49190614ee1565b600060405180830381855afa9150503d80600081146138df576040519150601f19603f3d011682016040523d82523d6000602084013e6138e4565b606091505b50915091508180156138f7575080516020145b801561391e57508051630b135d3f60e11b9061391c9083016020908101908401614efd565b145b98975050505050505050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061395f903390899088908890600401614f16565b6020604051808303816000875af192505050801561399a575060408051601f3d908101601f1916820190925261399791810190614f53565b60015b6139f8573d8080156139c8576040519150601f19603f3d011682016040523d82523d6000602084013e6139cd565b606091505b5080516000036139f0576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b604080516080810182526000808252602082018190529181018290526060810191909152610e7d613a458361322d565b613d8d565b606060a06040510180604052602081039150506000815280825b600183039250600a81066030018353600a900480613a645750819003601f19909101908152919050565b6017546000819003613ab3576040516313a8ad7d60e11b815260040160405180910390fd5b6001600160a01b038216600090815260186020526040902080546001600160d81b03811690600160f81b900460ff1615613b0057604051638246991960e01b815260040160405180910390fd5b81546001600160f81b038116600160f81b178355600090613b2b9085906001600160d81b0316614db6565b90506000856001600160a01b03168260405160006040518083038185875af1925050503d8060008114613b7a576040519150601f19603f3d011682016040523d82523d6000602084013e613b7f565b606091505b5050905080613ba1576040516312171d8360e31b815260040160405180910390fd5b6000613bad8685614a79565b90508015613c08578454600160d81b900463ffffffff1615613be257604051632aeca36d60e11b815260040160405180910390fd5b845463ffffffff60d81b1916600160d81b63ffffffff831602178555613c088782613c1d565b50505050505050565b60006113848383613e7f565b80600d5481613c2f6001546000540390565b613c399190614da3565b1115613c585760405163800113cb60e01b815260040160405180910390fd5b613c6283836137ce565b601554610100900460ff16158015613c7a5750600082115b15611784576015805461ff001916610100179055505050565b6000818152600183016020526040812054613cda57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e7d565b506000610e7d565b6011546000906001600160a01b03163314613cfe57603c613d02565b61012c5b9050613d176001600160401b03821642614cb2565b826001600160401b03161015610efa576040516313634e8d60e11b815260040160405180910390fd5b600081815b8451811015613d8557613d7182868381518110613d6457613d64614c83565b6020026020010151613ea9565b915080613d7d81614c99565b915050613d45565b509392505050565b604080516080810182526001600160a01b038316815260a083901c6001600160401b03166020820152600160e01b831615159181019190915260e89190911c606082015290565b613dde8383613ed8565b6001600160a01b0383163b15611784576000548281035b613e08600086838060010194508661392a565b613e25576040516368d2bf6b60e11b815260040160405180910390fd5b818110613df5578160005414612ce557600080fd5b6000808251604103613e705760208301516040840151606085015160001a613e6487828585613fd6565b94509450505050613e78565b506000905060025b9250929050565b6000826000018281548110613e9657613e96614c83565b9060005260206000200154905092915050565b6000818310613ec5576000828152602084905260409020611384565b6000838152602083905260409020611384565b6000805490829003613efd5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b178317905582840190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b818114613fac57808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600101613f74565b5081600003613fcd57604051622e076360e81b815260040160405180910390fd5b60005550505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561400d57506000905060036140ba565b8460ff16601b1415801561402557508460ff16601c14155b1561403657506000905060046140ba565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561408a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166140b3576000600192509250506140ba565b9150600090505b94509492505050565b6001600160e01b031981168114612a5157600080fd5b6000602082840312156140eb57600080fd5b8135611384816140c3565b80356001600160a01b038116811461410d57600080fd5b919050565b60006020828403121561412457600080fd5b611384826140f6565b6000806040838503121561414057600080fd5b614149836140f6565b946020939093013593505050565b60005b8381101561417257818101518382015260200161415a565b50506000910152565b60008151808452614193816020860160208601614157565b601f01601f19169290920160200192915050565b602081526000611384602083018461417b565b6000602082840312156141cc57600080fd5b5035919050565b803563ffffffff8116811461410d57600080fd5b80356001600160401b038116811461410d57600080fd5b60008060006060848603121561421357600080fd5b61421c846140f6565b925061422a602085016141d3565b9150614238604085016141e7565b90509250925092565b60008060006060848603121561425657600080fd5b61425f846140f6565b925061426d602085016140f6565b9150604084013590509250925092565b8035801515811461410d57600080fd5b60006020828403121561429f57600080fd5b6113848261427d565b600080604083850312156142bb57600080fd5b6142c4836141e7565b91506142d2602084016141e7565b90509250929050565b60008083601f8401126142ed57600080fd5b5081356001600160401b0381111561430457600080fd5b602083019150836020828501011115613e7857600080fd5b6000806020838503121561432f57600080fd5b82356001600160401b0381111561434557600080fd5b614351858286016142db565b90969095509350505050565b60008083601f84011261436f57600080fd5b5081356001600160401b0381111561438657600080fd5b6020830191508360208260051b8501011115613e7857600080fd5b600080602083850312156143b457600080fd5b82356001600160401b038111156143ca57600080fd5b6143518582860161435d565b80516001600160a01b031682526020808201516001600160401b03169083015260408082015115159083015260609081015162ffffff16910152565b6020808252825182820181905260009190848201906040850190845b81811015611e96576144418385516143d6565b928401926080929092019160010161442e565b600080600080600080600060a0888a03121561446f57600080fd5b614478886141d3565b9650614486602089016140f6565b955060408801356001600160401b03808211156144a257600080fd5b6144ae8b838c0161435d565b90975095508591506144c260608b016141e7565b945060808a01359150808211156144d857600080fd5b506144e58a828b016142db565b989b979a50959850939692959293505050565b60006020828403121561450a57600080fd5b611384826141e7565b80356001600160501b038116811461410d57600080fd5b803562ffffff8116811461410d57600080fd5b600080600080600080600060e0888a03121561455857600080fd5b8735965061456860208901614513565b9550614576604089016141d3565b94506060880135935061458b6080890161452a565b925061459960a089016141e7565b91506145a760c089016141e7565b905092959891949750929550565b6020808252825182820181905260009190848201906040850190845b81811015611e96578351835292840192918401916001016145d1565b6000806020838503121561460057600080fd5b82356001600160401b038082111561461757600080fd5b818501915085601f83011261462b57600080fd5b81358181111561463a57600080fd5b86602060c08302850101111561464f57600080fd5b60209290920196919550909350505050565b60008060006060848603121561467657600080fd5b61467f846140f6565b95602085013595506040909401359392505050565b600080604083850312156146a757600080fd5b6146b0836140f6565b91506142d26020840161427d565b600080604083850312156146d157600080fd5b6146da836141d3565b91506142d2602084016140f6565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261470f57600080fd5b81356001600160401b0380821115614729576147296146e8565b604051601f8301601f19908116603f01168101908282118183101715614751576147516146e8565b8160405283815286602085880101111561476a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156147a057600080fd5b6147a9856140f6565b93506147b7602086016141d3565b92506147c5604086016141e7565b915060608501356001600160401b038111156147e057600080fd5b6147ec878288016146fe565b91505092959194509250565b6000806000806080858703121561480e57600080fd5b614817856140f6565b9350614825602086016140f6565b92506040850135915060608501356001600160401b038111156147e057600080fd5b60808101610e7d82846143d6565b6000806040838503121561486857600080fd5b6146da836140f6565b6000806040838503121561488457600080fd5b50508035926020909101359150565b60608082528451828201819052600091906020906080850190828901855b828110156148f9576148e984835180516001600160d81b0316825260208082015163ffffffff16908301526040908101511515910152565b92850192908401906001016148b1565b50505084810382860152865180825290820192508682019060005b818110156149395782516001600160a01b031685529383019391830191600101614914565b50505050604092909201929092529392505050565b6000806000806000806080878903121561496757600080fd5b614970876141d3565b955060208701356001600160401b038082111561498c57600080fd5b6149988a838b0161435d565b90975095508591506149ac60408a016141e7565b945060608901359150808211156149c257600080fd5b506149cf89828a016142db565b979a9699509497509295939492505050565b81516001600160d81b0316815260208083015163ffffffff169082015260408083015115159082015260608101610e7d565b600181811c90821680614a2757607f821691505b602082108103614a4757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082614a8857614a88614a4d565b500490565b6000602080835260008454614aa181614a13565b80848701526040600180841660008114614ac25760018114614adc57614b0a565b60ff1985168984015283151560051b890183019550614b0a565b896000528660002060005b85811015614b025781548b8201860152908301908801614ae7565b8a0184019650505b509398975050505050505050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b601f82111561178457600081815260208120601f850160051c81016020861015614b765750805b601f850160051c820191505b8181101561151c57828155600101614b82565b6001600160401b03831115614bac57614bac6146e8565b614bc083614bba8354614a13565b83614b4f565b6000601f841160018114614bf45760008515614bdc5750838201355b600019600387901b1c1916600186901b178355612ce5565b600083815260209020601f19861690835b82811015614c255786850135825560209485019460019092019101614c05565b5086821015614c425760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b600060018201614cab57614cab614a63565b5060010190565b81810381811115610e7d57610e7d614a63565b6001600160401b03818116838216019080821115614ce557614ce5614a63565b5092915050565b9687526001600160501b0395909516602087015263ffffffff939093166040860152606085019190915262ffffff1660808401526001600160401b0390811660a08401521660c082015260e00190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215614d6457600080fd5b61138482614513565b600060208284031215614d7f57600080fd5b611384826141d3565b600060208284031215614d9a57600080fd5b6113848261452a565b80820180821115610e7d57610e7d614a63565b600082614dc557614dc5614a4d565b500690565b600084516020614ddd8285838a01614157565b855191840191614df08184848a01614157565b8554920191600090614e0181614a13565b60018281168015614e195760018114614e2e57614e5a565b60ff1984168752821515830287019450614e5a565b896000528560002060005b84811015614e5257815489820152908301908701614e39565b505082870194505b50929a9950505050505050505050565b6001600160501b03818116838216028082169190828114614e8d57614e8d614a63565b505092915050565b63ffffffff818116838216019080821115614ce557614ce5614a63565b634e487b7160e01b600052602160045260246000fd5b828152604060208201526000611381604083018461417b565b60008251614ef3818460208701614157565b9190910192915050565b600060208284031215614f0f57600080fd5b5051919050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090614f499083018461417b565b9695505050505050565b600060208284031215614f6557600080fd5b8151611384816140c356fea264697066735822122090333c8818cbda7dbeb44f204bc3f4d9b64cedb6c8ad4bc559b664017da3394964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "amountPurchased(address)": {
        "params": {
          "user": "user's address to query."
        }
      },
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "explicitOwnershipOf(uint256)": {
        "details": "Returns the `TokenOwnership` struct at `tokenId` without reverting. If the `tokenId` is out of bounds: - `addr = address(0)` - `startTimestamp = 0` - `burned = false` - `extraData = 0` If the `tokenId` is burned: - `addr = <Address of owner before token was burned>` - `startTimestamp = <Timestamp when token was burned>` - `burned = true` - `extraData = <Extra data when token was burned>` Otherwise: - `addr = <Address of owner>` - `startTimestamp = <Timestamp of start of ownership>` - `burned = false` - `extraData = <Extra data at start of ownership>`"
      },
      "explicitOwnershipsOf(uint256[])": {
        "details": "Returns an array of `TokenOwnership` structs at `tokenIds` in order. See {ERC721AQueryable-explicitOwnershipOf}"
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "refundAmount(address)": {
        "params": {
          "user": "user's address to query."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "sendAllTokens(address)": {
        "details": "if some tokens have already been sent, the remainder must be sent   using sendTokens().",
        "params": {
          "to": "address to send tokens to."
        }
      },
      "sendRefund(address)": {
        "details": "can only be called after the clearing price has been set.",
        "params": {
          "to": "the address to refund."
        }
      },
      "sendRefundBatch(address[])": {
        "params": {
          "addresses": "array of addresses to refund."
        }
      },
      "sendTokens(address,uint256)": {
        "details": "purchased amount for an address can be sent in multiple calls.   Can only be called after clearing price has been set.",
        "params": {
          "amount": "number of tokens to send.",
          "to": "address to send tokens to."
        }
      },
      "sendTokensAndRefund(address)": {
        "details": "can only be called after the clearing price has been set.",
        "params": {
          "to": "the address to refund."
        }
      },
      "sendTokensAndRefundBatch(address[])": {
        "params": {
          "addresses": "array of addresses to send tokens to."
        }
      },
      "sendTokensBatch(address[])": {
        "params": {
          "addresses": "array of addresses to send tokens to."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "setMinimumContribution(uint256)": {
        "details": "set this price in wei, not eth!",
        "params": {
          "minimumContributionInWei": "new price, set in wei"
        }
      },
      "setPrice(uint256)": {
        "details": "set this price in wei, not eth!",
        "params": {
          "priceInWei": "new price, set in wei"
        }
      },
      "setStartAndEndTimeUnixSeconds(uint64,uint64)": {
        "details": "cannot be reactivated after price has been set.",
        "params": {
          "endTime": "set to unix timestamp for the auction end time.",
          "startTime": "set to unix timestamp for the auction start time."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokensOfOwner(address)": {
        "details": "Returns an array of token IDs owned by `owner`. This function scans the ownership mapping and is O(`totalSupply`) in complexity. It is meant to be called off-chain. See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into multiple smaller scans if the collection is large enough to cause an out-of-gas error (10K collections should be fine)."
      },
      "tokensOfOwnerIn(address,uint256,uint256)": {
        "details": "Returns an array of token IDs owned by `owner`, in the range [`start`, `stop`) (i.e. `start <= tokenId < stop`). This function allows for tokens to be queried if the collection grows too big for a single call of {ERC721AQueryable-tokensOfOwner}. Requirements: - `start < stop`"
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "InvalidQueryRange()": [
        {
          "notice": "Invalid query range (`start` >= `stop`)."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "amountPurchased(address)": {
        "notice": "get the number of tokens purchased by an address, after the   clearing price has been set."
      },
      "bid()": {
        "notice": "place a bid in ETH or add to your existing bid. Calling this   multiple times will increase your bid amount. All bids placed are final   and cannot be reversed."
      },
      "refundAmount(address)": {
        "notice": "get the refund amount for an account, after the clearing price   has been set."
      },
      "sendAllTokens(address)": {
        "notice": "send all of an address's purchased tokens."
      },
      "sendRefund(address)": {
        "notice": "send refund to an address. Refunds are unsuccessful bids or   an address's remaining eth after all their tokens have been paid for."
      },
      "sendRefundBatch(address[])": {
        "notice": "send refunds to a batch of addresses."
      },
      "sendTokens(address,uint256)": {
        "notice": "mint tokens to an address."
      },
      "sendTokensAndRefund(address)": {
        "notice": "send refunds and tokens to an address."
      },
      "sendTokensAndRefundBatch(address[])": {
        "notice": "send refunds and tokens to a batch of addresses."
      },
      "sendTokensBatch(address[])": {
        "notice": "send tokens to a batch of addresses."
      },
      "setMinimumContribution(uint256)": {
        "notice": "set the minimum contribution required to place a bid"
      },
      "setPrice(uint256)": {
        "notice": "set the clearing price after all bids have been placed."
      },
      "setStartAndEndTimeUnixSeconds(uint64,uint64)": {
        "notice": "set the start and end times in unix seconds for the bucket auction."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6101,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6103,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6105,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 6107,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 6111,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6115,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6120,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)6033_storage)"
      },
      {
        "astId": 6126,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 400,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 549,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_status",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3875,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_mintable",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 3877,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_currentBaseURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 3879,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_activeStage",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3881,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_maxMintableSupply",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3883,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_globalWalletLimit",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3885,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_tokenURISuffix",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 3887,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_baseURIPermanent",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 3889,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_cosigner",
        "offset": 1,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 3891,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_crossmintAddress",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 3895,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_mintStages",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_struct(MintStageInfo)5810_storage)dyn_storage"
      },
      {
        "astId": 3901,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_stageMintedCountsPerWallet",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint32))"
      },
      {
        "astId": 3905,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_stageMintedCounts",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2946,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_claimable",
        "offset": 0,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 2948,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_firstTokenSent",
        "offset": 1,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 2950,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_startTimeUnixSeconds",
        "offset": 2,
        "slot": "21",
        "type": "t_uint64"
      },
      {
        "astId": 2952,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_endTimeUnixSeconds",
        "offset": 10,
        "slot": "21",
        "type": "t_uint64"
      },
      {
        "astId": 2954,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_minimumContributionInWei",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 2956,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_price",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 2961,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_userData",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_struct(User)5729_storage)"
      },
      {
        "astId": 2964,
        "contract": "contracts/BucketAuction.sol:BucketAuction",
        "label": "_users",
        "offset": 0,
        "slot": "25",
        "type": "t_struct(AddressSet)2640_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(MintStageInfo)5810_storage)dyn_storage": {
        "base": "t_struct(MintStageInfo)5810_storage",
        "encoding": "dynamic_array",
        "label": "struct IERC721I.MintStageInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(User)5729_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBucketAuction.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)5729_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint32))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint32)"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)6033_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)6033_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2640_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2639,
            "contract": "contracts/BucketAuction.sol:BucketAuction",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2339_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MintStageInfo)5810_storage": {
        "encoding": "inplace",
        "label": "struct IERC721I.MintStageInfo",
        "members": [
          {
            "astId": 5799,
            "contract": "contracts/BucketAuction.sol:BucketAuction",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint80"
          },
          {
            "astId": 5801,
            "contract": "contracts/BucketAuction.sol:BucketAuction",
            "label": "walletLimit",
            "offset": 10,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5803,
            "contract": "contracts/BucketAuction.sol:BucketAuction",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 5805,
            "contract": "contracts/BucketAuction.sol:BucketAuction",
            "label": "maxStageSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint24"
          },
          {
            "astId": 5807,
            "contract": "contracts/BucketAuction.sol:BucketAuction",
            "label": "startTimeUnixSeconds",
            "offset": 3,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 5809,
            "contract": "contracts/BucketAuction.sol:BucketAuction",
            "label": "endTimeUnixSeconds",
            "offset": 11,
            "slot": "2",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2339_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2334,
            "contract": "contracts/BucketAuction.sol:BucketAuction",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2338,
            "contract": "contracts/BucketAuction.sol:BucketAuction",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenApprovalRef)6033_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 6032,
            "contract": "contracts/BucketAuction.sol:BucketAuction",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(User)5729_storage": {
        "encoding": "inplace",
        "label": "struct IBucketAuction.User",
        "members": [
          {
            "astId": 5724,
            "contract": "contracts/BucketAuction.sol:BucketAuction",
            "label": "contribution",
            "offset": 0,
            "slot": "0",
            "type": "t_uint216"
          },
          {
            "astId": 5726,
            "contract": "contracts/BucketAuction.sol:BucketAuction",
            "label": "tokensClaimed",
            "offset": 27,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5728,
            "contract": "contracts/BucketAuction.sol:BucketAuction",
            "label": "refundClaimed",
            "offset": 31,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}